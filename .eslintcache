[{"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\index.js":"1","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\App.js":"2","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\index.js":"3","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\header.js":"4","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\button.js":"5","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\display-card.js":"6","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\blog-card.js":"7","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\footer.js":"8","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\tournaments.js":"9","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\search-bar.js":"10","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\upcoming-card.js":"11","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\content.js":"12","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\tournament.js":"13","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\utilities\\scrollToTop.js":"14","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\videos.js":"15","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\podcasts.js":"16","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\firebase\\config.js":"17","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\hooks\\useCollectionData.js":"18","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\free-agent-card.js":"19","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\tag.js":"20","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\podcast-card.js":"21","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\current-card.js":"22","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\admin.js":"23","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\sign-in.js":"24","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\account-dashboard.js":"25","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\utilities\\generateID.js":"26","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\edit-organization.js":"27","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\edit-org-card.js":"28","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\edit-tournament-card.js":"29","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\edit-tournament.js":"30","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\utilities\\areEqual.js":"31","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\selected-item.js":"32","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\utilities\\formatDate.js":"33"},{"size":219,"mtime":1610126174575,"results":"34","hashOfConfig":"35"},{"size":2547,"mtime":1612483768593,"results":"36","hashOfConfig":"35"},{"size":6709,"mtime":1612733247160,"results":"37","hashOfConfig":"35"},{"size":1949,"mtime":1612483778085,"results":"38","hashOfConfig":"35"},{"size":362,"mtime":1612113430085,"results":"39","hashOfConfig":"35"},{"size":696,"mtime":1611781227080,"results":"40","hashOfConfig":"35"},{"size":460,"mtime":1610125821701,"results":"41","hashOfConfig":"35"},{"size":140,"mtime":1610125595456,"results":"42","hashOfConfig":"35"},{"size":7212,"mtime":1612733611334,"results":"43","hashOfConfig":"35"},{"size":320,"mtime":1610128939895,"results":"44","hashOfConfig":"35"},{"size":774,"mtime":1612388689683,"results":"45","hashOfConfig":"35"},{"size":3040,"mtime":1611780852498,"results":"46","hashOfConfig":"35"},{"size":17777,"mtime":1612630691066,"results":"47","hashOfConfig":"35"},{"size":256,"mtime":1611032396949,"results":"48","hashOfConfig":"35"},{"size":10260,"mtime":1611848662695,"results":"49","hashOfConfig":"35"},{"size":1889,"mtime":1612391421710,"results":"50","hashOfConfig":"35"},{"size":962,"mtime":1611180835461,"results":"51","hashOfConfig":"35"},{"size":448,"mtime":1611188195814,"results":"52","hashOfConfig":"35"},{"size":1134,"mtime":1612582540119,"results":"53","hashOfConfig":"35"},{"size":855,"mtime":1611847549377,"results":"54","hashOfConfig":"35"},{"size":795,"mtime":1612391480561,"results":"55","hashOfConfig":"35"},{"size":829,"mtime":1612391639057,"results":"56","hashOfConfig":"35"},{"size":7031,"mtime":1611870576494,"results":"57","hashOfConfig":"35"},{"size":3827,"mtime":1612116280410,"results":"58","hashOfConfig":"35"},{"size":11687,"mtime":1612671758874,"results":"59","hashOfConfig":"35"},{"size":123,"mtime":1612115380217,"results":"60","hashOfConfig":"35"},{"size":8144,"mtime":1612672024661,"results":"61","hashOfConfig":"35"},{"size":757,"mtime":1612321668631,"results":"62","hashOfConfig":"35"},{"size":836,"mtime":1612671691429,"results":"63","hashOfConfig":"35"},{"size":25579,"mtime":1612671563764,"results":"64","hashOfConfig":"35"},{"size":1091,"mtime":1612671427765,"results":"65","hashOfConfig":"35"},{"size":376,"mtime":1612298108470,"results":"66","hashOfConfig":"35"},{"size":308,"mtime":1612576562759,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"bba6em",{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":1,"source":"130","usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"70"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"70"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\index.js",[],["153","154"],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\App.js",["155","156","157","158","159"],"import {useState,useEffect} from 'react'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport HomePage from './pages/index'\nimport TournamentsPage from './pages/tournaments'\nimport TournamentPage from './pages/tournament'\nimport ContentPage from './pages/content'\nimport VideosPage from './pages/videos'\nimport PodcastsPage from './pages/podcasts'\nimport AdminPage from './pages/admin'\nimport SignInPage from './pages/sign-in'\nimport AcctDashPage from './pages/account-dashboard'\nimport Header from './components/header'\nimport Footer from './components/footer'\n\nimport {firebase} from './firebase/config'\nimport { useAuthState } from 'react-firebase-hooks/auth';\n\nimport ScrollToTop from './utilities/scrollToTop'\n\n\nfunction App() {\n\n  const auth = firebase.auth();\n\n  const [user, loading, error] = useAuthState(auth);\n\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route path exact = '/'>\n            <Header user = {user}/>\n            <HomePage></HomePage>\n          </Route>\n          <Route path = '/tournaments'>\n            <ScrollToTop/>\n            <Header mainPath = \"tournaments\" user = {user}/>\n            <TournamentsPage></TournamentsPage>\n          </Route>\n          <Route path = '/content'>\n            <ScrollToTop/>\n            <Header mainPath = \"content\" user = {user}/>\n            <ContentPage></ContentPage>\n          </Route>\n          <Route path = '/tournament'>\n            <ScrollToTop/>\n            <Header mainPath = \"tournaments\" user = {user}/>\n            <TournamentPage user = {user}></TournamentPage>\n          </Route>\n          <Route path = '/videos'>\n            <ScrollToTop/>\n            <Header mainPath = \"content\" user = {user}/>\n            <VideosPage></VideosPage>\n          </Route>\n          <Route path = '/podcasts'>\n            <ScrollToTop/>\n            <Header mainPath = \"content\" user = {user}/>\n            <PodcastsPage></PodcastsPage>\n          </Route>\n          <Route path = \"/admin\">\n            <ScrollToTop/>\n            <Header user = {user}/>\n            <AdminPage></AdminPage>\n          </Route>\n          <Route path = \"/sign-in\">\n            <ScrollToTop/>\n            <Header user = {user}/>\n            <SignInPage></SignInPage>\n          </Route>\n          <Route path = \"/account-dashboard\">\n            <ScrollToTop/>\n            <Header user = {user}/>\n            <AcctDashPage user = {user} ></AcctDashPage>\n          </Route>\n        </Switch>\n      </Router>\n\n      {/*<Footer/>*/}\n    </>\n\n  );\n}\n\nexport default App;\n","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\index.js",["160","161","162","163","164","165","166","167"],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\header.js",["168","169","170"],"import React, {useEffect, useState} from 'react'\r\nimport {Link, useRouteMatch} from 'react-router-dom'\r\n\r\nimport {firebase} from '../firebase/config'\r\n\r\nconst Header = ({mainPath, user}) => {\r\n\r\n    const db = firebase.firestore()\r\n\r\n    const [img, setImg] = useState(null)\r\n\r\n    useEffect(()=>{\r\n        if(user){\r\n            db.collection('users').doc(user.uid).get().then((doc) => {\r\n                setImg(doc.data().img)\r\n            })\r\n\r\n        }\r\n    },[user])\r\n\r\n    return (\r\n        <header>\r\n            <Link to = \"/\" className = \"link\">\r\n                <h1>\r\n                    SPIKEHUB\r\n                </h1>\r\n            </Link>\r\n\r\n            <nav>\r\n                <Link to = \"/tournaments/upcoming\" className = \"link\">\r\n                    <div className = {mainPath === \"tournaments\" ? \"nav-item active\" : \"nav-item\"}>\r\n                        Tournaments\r\n                    </div>\r\n                </Link>\r\n\r\n                <Link to = \"/content\" className = \"link\">\r\n                    <div className = {mainPath === \"content\" ? \"nav-item active\" : \"nav-item\"}>\r\n                        Content\r\n                    </div>\r\n                </Link>\r\n                {user ?\r\n                <Link to = '/account-dashboard/profile'className = 'link'>\r\n                    <div className = \"nav-item\" style = {{height:'1.5rem', padding:'.75rem 1rem'}}>\r\n                        <img style = {{height:'1.5rem', width:'1.5rem', borderRadius:'50%', backgroundColor:'var(--light-gray)'}} src = {img  ? img : \"https://res.cloudinary.com/dicfhqxoo/image/upload/v1611984880/profilepicperson_hdwfcw.png\"}></img>\r\n                    </div>\r\n                </Link>\r\n                :\r\n                (<Link to = \"/sign-in\" className = \"link\">\r\n                    <div className = \"nav-item\">Sign In</div>\r\n                </Link>)\r\n\r\n                }\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\nexport default Header","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\button.js",[],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\display-card.js",[],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\blog-card.js",[],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\footer.js",[],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\tournaments.js",["171","172","173","174","175","176","177","178","179"],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\search-bar.js",["180"],"import React, {useEffect} from 'react'\r\n\r\nconst SearchBar = ({keyword, setKeyword, placeholder}) => {\r\n\r\n\r\n    return (\r\n        <input className = \"search\" value = {keyword} onChange = {(e) => setKeyword(e.target.value)} placeholder = {`Search ${placeholder}`}>\r\n        </input> \r\n    )\r\n}\r\n\r\nexport default SearchBar;","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\upcoming-card.js",["181"],"import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst UpcomingCard = ({tournamentName, date, img, slug}) => {\r\n    return (\r\n        <Link className = \"link upcoming-card\" to = {`/tournament?name=${slug}`}>\r\n                <div style = {{backgroundColor:'var(--light-gray)'}}> \r\n                    <img src = {img || \"https://res.cloudinary.com/dicfhqxoo/image/upload/v1612321575/tournament-icon_ydpdbe.png\"} style = {{width:'100%', height:'100%', objectFit: 'cover'}}></img>\r\n                </div>\r\n                <div style = {{padding:'.5rem'}}>\r\n                    <h5>{date}</h5>\r\n                    <h4 className = \"upcoming-card--header\">{tournamentName}</h4>\r\n                </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default UpcomingCard","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\content.js",["182","183","184","185","186","187","188","189","190"],"import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport {firebase} from '../firebase/config'\r\nimport {useCollection} from 'react-firebase-hooks/firestore'\r\n\r\nimport Button from '../components/button'\r\n\r\nconst ContentPage = () => {\r\n\r\n    const [allVideos, videosLoading, videosError] = useCollection()\r\n\r\n    return(\r\n        <div style = {{backgroundColor: 'var(--red)', minHeight:'calc(100vh - 3rem)', width:'100%', display:'inline-block'}}>\r\n            <div class = \"content\">\r\n                <p className = \"small-heading\">COMMUNITY CONTENT</p>\r\n                <h2>\r\n                    Everything Roundnet <br/> for your eyes and ears.\r\n                </h2>\r\n            </div>\r\n            <section>\r\n                <h2 className = \"section-header\">Recent Videos</h2>\r\n                <h4 className = \"section-subheader\">See everything you've missed</h4>\r\n                <div className = \"grid two-column\" style = {{padding:'1rem 0'}}>\r\n                    <iframe style = {{margin:'auto'}} width=\"525\" height=\"295\" src=\"https://www.youtube.com/embed/KAPPdgNZenc\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                    <iframe style = {{margin:'auto'}} width=\"525\" height=\"295\" src=\"https://www.youtube.com/embed/KAPPdgNZenc\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                </div>\r\n                <Link to = \"/videos\" className = \"link\">\r\n                    <Button size = \"large\" color = \"red\" label = \"More Videos\" styles = {{margin:'1rem'}}></Button>\r\n                </Link>\r\n            </section>\r\n            <section>\r\n                <h2 className = \"section-header\">Recent Podcasts</h2>\r\n                <h4 className = \"section-subheader\">Catch up on your favorite roundnet podcasts</h4>\r\n                <Link to = \"/podcasts\" className = \"link\">\r\n                    <div className = \"grid three-column\" style = {{padding:'1rem 0'}}>\r\n                        <iframe style ={{margin:'auto'}} src=\"https://open.spotify.com/embed-podcast/show/0A1vQ9W7EsrwjM0YmZB2tA\" width=\"90%\" height=\"232\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\r\n                        <iframe style ={{margin:'auto'}} src=\"https://open.spotify.com/embed-podcast/show/0A1vQ9W7EsrwjM0YmZB2tA\" width=\"90%\" height=\"232\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\r\n                        <iframe style ={{margin:'auto'}} src=\"https://open.spotify.com/embed-podcast/show/0A1vQ9W7EsrwjM0YmZB2tA\" width=\"90%\" height=\"232\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\r\n                    </div>\r\n                    <Button size = \"large\" color = \"red\" label = \"More Podcasts\" styles = {{margin:'1rem'}} ></Button>\r\n                </Link>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContentPage;","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\tournament.js",["191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209"],"import React, {useState, useEffect} from 'react'\r\nimport {useLocation} from 'react-router-dom'\r\n\r\nimport Button from '../components/button'\r\nimport FreeAgentCard from '../components/free-agent-card'\r\n\r\nimport tourneyIcon from '../assets/ex-tourney-icon.png'\r\n\r\nimport {firebase} from '../firebase/config'\r\nimport {useDocument} from 'react-firebase-hooks/firestore'\r\nimport axios from 'axios'\r\nimport TournamentsPage from './tournaments'\r\n\r\nimport formatDate from '../utilities/formatDate'\r\nimport generateID from '../utilities/generateID'\r\n\r\nconst useQueryString = () =>{\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\n\r\nconst TournamentPage = ({user}) => {\r\n\r\n    const db = firebase.firestore()\r\n\r\n    const id = useQueryString().get('name');\r\n    const [tournament, loading, error] = useDocument(db.doc(`tournaments/${id}`))\r\n\r\n    const [isFreeAgentsOpen, setIsFreeAgentsOpen] = useState(true)\r\n    const [isScheduleOpen, setIsScheduleOpen] = useState(false)\r\n    const [isPrizesOpen, setIsPrizesOpen] = useState(false)\r\n    const [isTeamsOpen, setIsTeamsOpen] = useState(false)\r\n    const [isResultsOpen, setIsResultsOpen] = useState(true)\r\n\r\n    const [userData, setUserData] = useState({})\r\n    const [isOverlayOpen, setIsOverlayOpen] = useState(false)\r\n    const [manualEntry, setManualEntry] = useState(false)\r\n    const [freeAgent, setFreeAgent] = useState({})\r\n    const [profileAlert, setProfileAlert] = useState(false)\r\n\r\n    const [hostName, setHostName] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        if(tournament){\r\n            const hostType = tournament.data().host.type;\r\n            const hostId = tournament.data().host.id;\r\n\r\n\r\n            if(hostType == \"organization\"){\r\n                db.collection(\"organizations\").doc(hostId).get().then((doc) => {\r\n                    setHostName(doc.data().name)\r\n                })\r\n            }\r\n            if(hostType == \"user\"){\r\n                db.collection(\"users\").doc(hostId).get().then((doc) => {\r\n                    setHostName(doc.data().fName + \" \" + doc.data().lName)\r\n                })\r\n            }\r\n\r\n            setFreeAgent({...freeAgent, division: tournament.data().divisions[0]})\r\n        }\r\n    },[tournament])\r\n\r\n    useEffect(()=>{\r\n        if(user){\r\n            db.collection('users').doc(user.uid).get().then((doc) => {\r\n                setUserData(doc.data())\r\n            })\r\n        }\r\n    },[user])\r\n\r\n    const toggleAccordion = (accordionName) => {\r\n        // e.currentTarget.nextElementSibling.classList.toggle('open');\r\n        switch(accordionName) {\r\n            case 'freeAgents':\r\n                setIsFreeAgentsOpen(!isFreeAgentsOpen);\r\n            case 'teams': \r\n                setIsTeamsOpen(!isTeamsOpen);\r\n                return\r\n            case 'results':\r\n                setIsResultsOpen(!isResultsOpen)\r\n                return\r\n            case 'schedule':\r\n                setIsScheduleOpen(!isScheduleOpen)\r\n                return\r\n            case 'prizes':\r\n                setIsPrizesOpen(!isPrizesOpen)\r\n        }\r\n\r\n    }\r\n\r\n    const addFreeAgent = (isSelf) => {\r\n        let player = {}\r\n\r\n        if(isSelf){\r\n            if(!userData.fName || !userData.lName || !(userData.email || userData.phone) || !userData.rpr){\r\n                setProfileAlert(true)\r\n                return;\r\n            }\r\n            player = {\r\n                name: userData.fName + \" \" + userData.lName,\r\n                email: userData.email,\r\n                phone: userData.phone,\r\n                rpr: userData.rpr,\r\n                division: freeAgent.division,\r\n                freeAgentId: generateID(),\r\n                creatorId: user.uid\r\n            }\r\n        }\r\n\r\n        else{\r\n            if(user){\r\n                player = {...freeAgent, freeAgentId: generateID(), creatorId: user.uid}\r\n            }else{\r\n                player = freeAgent\r\n            }\r\n        }\r\n\r\n        if(tournament.data().freeAgents){\r\n            db.doc(`tournaments/${id}`).update({freeAgents: [...tournament.data().freeAgents, player]}).then(()=> {setIsOverlayOpen(false); setManualEntry(false)})\r\n        }\r\n        else{\r\n            db.doc(`tournaments/${id}`).update({freeAgents: [player]}).then(()=> {setIsOverlayOpen(false); setManualEntry(false)})\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const deleteFreeAgent = (faID) => {\r\n\r\n        const updatedFreeAgents = tournament.data().freeAgents.filter((obj) => {\r\n            return !(obj.freeAgentId == faID)\r\n        })\r\n\r\n        console.log(updatedFreeAgents)\r\n\r\n        db.doc(`tournaments/${id}`).update({freeAgents: updatedFreeAgents}).then(()=> setIsOverlayOpen(false))\r\n    }\r\n\r\n\r\n    return (\r\n        <div style = {{minHeight: \"calc(100vh - 3rem)\", backgroundColor:'var(--light-gray'}}>\r\n            <div className = \"content\" style = {{paddingTop: '3rem'}}>\r\n                <h2 className = \"tournaments-heading\" style = {{color: '#333333'}}>{tournament && tournament.data().name}</h2>\r\n                <h4 style = {{display:'inline-block', fontSize: '1.6rem'}}>{tournament && `Hosted By ${hostName}`}</h4>\r\n            </div>\r\n            <div className = \"content tournament-info-section\">\r\n                <div className = \"tournament-sidebar\">\r\n                    <img src = {tournament && tournament.data().img || \"https://res.cloudinary.com/dicfhqxoo/image/upload/v1612321575/tournament-icon_ydpdbe.png\"} style = {{width: '95%', margin:'1.5rem auto'}}></img>\r\n                    <h3>{tournament && tournament.data().location }</h3>\r\n                    <h3 style = {{fontSize:'1.25rem', marginTop:'.5rem'}}>{tournament && formatDate(new Date(tournament.data().date.seconds*1000))}</h3>\r\n                    <p>{tournament && tournament.data().description}</p>\r\n                    {tournament && new Date(tournament.data().regEndDate.seconds*1000) > new Date() ?\r\n                        <>\r\n                        {tournament.data().link ? \r\n                        <Button size = \"large\" color = \"red\" label = \"Register\" onClick = {tournament && tournament.data().link}></Button>\r\n                        :\r\n                        <Button size = \"medium\" color = \"red\" label = \"No Registration Link\" onClick = {tournament && tournament.data().link} isDisabled = {true}></Button>\r\n                        }                       \r\n                        <p style = {{fontSize:'.8rem', margin:'.5rem auto 0 auto'}}>Registration ends on <br/><strong>{formatDate(new Date(tournament.data().regEndDate.seconds * 1000))}</strong></p>\r\n                        </>\r\n                        :\r\n                        <Button size = \"medium\" color = \"light-gray\" label = \"Registration Has Ended\" onClick = {tournament && tournament.data().link} isDisabled = {true}></Button>\r\n                    }\r\n                    \r\n                </div>\r\n                <div className = \"tournament-info\">\r\n                    {tournament && new Date(tournament.data().date.seconds*1000) > new Date() ? \r\n                    (<>\r\n                        <button className= \"accordion-header\" onClick = {() => toggleAccordion('freeAgents')}>\r\n                            <div style = {{display:'flex'}}>\r\n                                <h3 style = {{display:'inline-block', paddingRight: '1rem'}}>Free Agents</h3>\r\n                                <Button size = \"medium\" color = \"red\" label = \"Add New\" styles = {{margin:'auto'}} onClick = {(e)=>{e.stopPropagation(); setIsOverlayOpen(true)}}></Button>\r\n                            </div>\r\n                            <h3>{isFreeAgentsOpen ? \"-\" : \"+\"}</h3>\r\n                        </button>\r\n                        <div className = {`accordion-content grid two-column ${isFreeAgentsOpen ? \"open\" : \"\"}`} style = {{gap: '1rem', width: 'calc(100% - 2rem)'}}>\r\n                            {tournament && tournament.data().freeAgents && Object.keys(tournament.data().freeAgents).length > 0 ? \r\n                                tournament.data().freeAgents.map((data) => (<FreeAgentCard data = {data} user = {user} deleteSelf = {() => deleteFreeAgent(data.freeAgentId)}></FreeAgentCard>))\r\n                            :\r\n                            <h4 style = {{margin: '0 1rem'}}>No Free Agents Yet!</h4>\r\n                            }\r\n                        </div>\r\n                        <button className= \"accordion-header\" onClick = {() => toggleAccordion('schedule')}>\r\n                            <div style = {{display:'flex'}}>\r\n                                <h3 style = {{display:'inline-block', paddingRight: '1rem'}}>Schedule</h3>\r\n                            </div>\r\n                            <h3>{isScheduleOpen ? \"-\" : \"+\"}</h3>\r\n                        </button>\r\n                        <div className = {`accordion-content grid two-column ${isScheduleOpen ? \"open\" : \"\"}`} style = {{gap: '1rem', width: 'calc(100% - 2rem)'}}>\r\n                            {tournament && tournament.data().schedule && tournament.data().schedule.length > 0 ? \r\n                            <div className = \"grid\" style = {{gridTemplateColumns: 'auto 1fr', columnGap: '1rem', margin:'0 1rem'}}>\r\n                                {tournament.data().schedule.map((data) => (<>\r\n                                    <p className = \"schedule-time\">{data.time}</p>\r\n                                    <p className = \"schedule-event\">{data.event}</p>\r\n                                </>))}\r\n                            </div>\r\n                            :\r\n                            <h4 style = {{margin: '0 1rem'}}>Schedule TBD</h4>\r\n                            }\r\n\r\n                        </div>\r\n                        <button className= \"accordion-header\" onClick = {() => toggleAccordion('prizes')}>\r\n                            <div style = {{display:'flex'}}>\r\n                                <h3 style = {{display:'inline-block', paddingRight: '1rem'}}>Prizes</h3>\r\n                            </div>\r\n                            <h3>{isPrizesOpen ? \"-\" : \"+\"}</h3>\r\n                        </button>\r\n                        <div className = {`accordion-content grid two-column ${isPrizesOpen ? \"open\" : \"\"}`} style = {{gap: '1rem', width: 'calc(100% - 2rem)'}}>\r\n                            {(tournament && tournament.data().prizes && Object.keys(tournament.data().prizes).length > 0)  ?\r\n                            <div className = \"grid\" style = {{gridTemplateColumns: 'auto auto 1fr', columnGap: '1rem', margin:'0 1rem'}}>\r\n                                {Object.keys(tournament.data().prizes).map((key) => (<>\r\n                                    <p className = \"schedule-time\" style = {{gridRow: 'span 3'}}>{key}</p>\r\n                                    <p className = \"schedule-event\">1st</p>\r\n                                    <p className = \"schedule-event\">{tournament.data().prizes[key][0]}</p>\r\n                                    <p className = \"schedule-event\">2nd</p>\r\n                                    <p className = \"schedule-event\">{tournament.data().prizes[key][1]}</p>\r\n                                    <p className = \"schedule-event\">3rd</p>\r\n                                    <p className = \"schedule-event\">{tournament.data().prizes[key][2]}</p>\r\n                                </>))}\r\n                            </div>   \r\n                            :\r\n                            <h4 style = {{margin:'0 1rem'}}>Prizes TBD</h4>\r\n                            }\r\n                     \r\n                        </div>\r\n                    </>) \r\n                    :\r\n                    (<>\r\n                        {/* <button className= \"accordion-header\" onClick = {() => toggleAccordion('teams')}>\r\n                            <div style = {{display:'flex'}}>\r\n                                <h3 style = {{display:'inline-block', paddingRight: '1rem'}}>Teams</h3>\r\n                                <Button size = \"medium\" color = \"red\" label = \"Add New\" styles = {{margin:'auto'}}></Button>\r\n                            </div>\r\n                            <h3>{isTeamsOpen ? \"-\":\"+\"}</h3>\r\n                        </button>\r\n                        <div className = {`accordion-content ${isTeamsOpen ? \"open\" : \"\"}`}>\r\n                            Hi\r\n                        </div> */}\r\n                        <button className= \"accordion-header\" onClick = {() => toggleAccordion('results')}>\r\n                            <div style = {{display:'flex'}}>\r\n                                <h3 style = {{display:'inline-block', paddingRight: '1rem'}}>Results</h3>\r\n                            </div>\r\n                            <h3>{isResultsOpen ? \"-\":\"+\"}</h3>\r\n                        </button>\r\n                        <div className = {`accordion-content ${isResultsOpen ? \"open\" : \"\"}`}>\r\n                            {tournament && tournament.data().results && console.log(tournament.data().results)}\r\n                            <div className = \"grid\" style = {{gridTemplateColumns: 'auto auto 1fr', columnGap: '1rem', margin:'0 1rem'}}>\r\n                                {tournament && tournament.data().results && Object.keys(tournament.data().results).sort().map((division) => (\r\n                                <>\r\n                                    <p className = \"schedule-time line-above\" style = {{gridRow: 'span 3'}}>{division}</p>\r\n                                    {Object.keys(tournament.data().results[division]).map((place, index) => {\r\n                                        const teamArrs = tournament.data().results[division][place] \r\n                                        \r\n                                        return (<>\r\n                                            <p className = \"schedule-time\" style = {{fontWeight:'500'}}>{place == 1 && \"1st\"}{place == 2 && \"2nd\"}{place == 3 && \"3rd\"}</p>\r\n                                            <p className = \"schedule-event\">{teamArrs[0] + \" \" + teamArrs[1] + \" & \" + teamArrs[2]}</p>\r\n                                        </>)})\r\n                                    }\r\n                                </>))}\r\n                            </div>\r\n                        </div>\r\n                    </>)}\r\n                </div>\r\n            </div>\r\n            {console.log(user)}\r\n            {isOverlayOpen ? \r\n            (<div style = {{width:'100%',height:'100%', position:'fixed', top:0, left:0, backgroundColor: 'rgba(0,0,0,.5)', display:'flex'}}>\r\n                <div style = {{width:'90%', maxWidth:'15rem', backgroundColor:'white', padding:'2rem', margin:'auto', borderRadius:'.5rem'}}>\r\n                    <h3>Add a Free Agent</h3>\r\n                    {user && !manualEntry ? \r\n                    (<>\r\n                        <div style = {{marginTop: '1rem'}}>\r\n                            <label className = \"dash-label\" style = {{width:'100%', textAlign:'left'}}>Choose a division</label>\r\n                            <select className = \"dash-input\" placeholder = \"division\" style = {{marginBottom:'1rem'}} value = {freeAgent.division} onChange = {(e) => setFreeAgent({...freeAgent, division: e.target.value})}>\r\n                                {tournament && tournament.data().divisions.map((div) => (\r\n                                    <option value = {div}>{div}</option>\r\n                                ))}\r\n                            </select>\r\n                            <Button size = \"medium\" color = \"red\" label = \"Add Yourself\" onClick = {()=> addFreeAgent(true)} styles = {{marginBottom:'1rem'}}></Button>\r\n                            {profileAlert ? <p style = {{margin:'-.5rem 0 .5rem 0', fontSize: '.7rem'}}>Make sure your profile has enough information!</p>:null}\r\n                            <Button size = \"medium\" color = \"red\" label = \"Enter Player Info\" onClick = {() => setManualEntry(true)} styles = {{marginBottom:'1rem', marginRight:'1rem'}}></Button>\r\n                            <Button size = \"medium\" color = \"dark-gray\" label = \"Cancel\" onClick = {() => {setIsOverlayOpen(false); setProfileAlert(false)}}></Button>\r\n                        </div>\r\n                    </>)\r\n                    :(<>\r\n                        <div style = {{marginTop:'1rem'}}>\r\n                            <label className = \"dash-label\">Name</label>\r\n                            <input className = \"dash-input\" value = {freeAgent.name} onChange = {(e)=> setFreeAgent({...freeAgent, name: e.target.value})}></input>\r\n                            <label className = \"dash-label\">Email</label>\r\n                            <input className = \"dash-input\"  value = {freeAgent.email} onChange = {(e)=> setFreeAgent({...freeAgent, email: e.target.value})}></input>\r\n                            <label className = \"dash-label\">Phone</label>\r\n                            <input className = \"dash-input\"  value = {freeAgent.phone} onChange = {(e)=> setFreeAgent({...freeAgent, phone: e.target.value})}></input>\r\n                            <label className = \"dash-label\">RPR</label>\r\n                            <input className = \"dash-input\"  value = {freeAgent.rpr} onChange = {(e)=> setFreeAgent({...freeAgent, rpr: e.target.value})}></input>\r\n                            <div style = {{textAlign:'right'}}>\r\n                                <Button size = \"medium\" color = \"dark-gray\" label = \"Back\" onClick = {() => setManualEntry(false)} styles = {{marginRight:'1rem'}}></Button>\r\n                                <Button size = \"medium\" color = \"red\" label = \"Submit\" onClick = {() => addFreeAgent(false)} styles = {{marginBottom:'1rem'}}></Button>\r\n                            </div>\r\n                        </div>\r\n                    </>)}\r\n                </div>\r\n            </div>):\r\n            null\r\n            }\r\n        </div>   \r\n    )\r\n}\r\n\r\nexport default TournamentPage","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\utilities\\scrollToTop.js",[],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\videos.js",["210","211","212","213","214","215"],"import React, {useEffect, useState} from 'react'\r\n\r\nimport Tag from '../components/tag'\r\n\r\nimport {firebase} from '../firebase/config'\r\nimport {useCollection} from 'react-firebase-hooks/firestore'\r\n\r\nconst VideosPage = () => {\r\n\r\n    const db = firebase.firestore()\r\n\r\n    const [videos, loading, error] = useCollection(db.collection('videos'))\r\n\r\n    const [sortedVideos, setSortedVideos] = useState([])\r\n    const [genTags, setGenTags] = useState({})\r\n    const [players, setPlayers] = useState({})\r\n    const [teams, setTeams] = useState({})\r\n    const [tournaments, setTournaments] = useState({})\r\n\r\n    const [selectedTags, setSelectedTags] = useState([])\r\n    const [selectedPlayers, setSelectedPlayers] = useState([])\r\n    const [selectedTeams, setSelectedTeams] = useState([])\r\n    const [selectedTournaments, setSelectedTournaments] = useState([])\r\n\r\n    const videoReducer = (accumulator, currentValue) =>{\r\n        accumulator.genTags = [...accumulator.genTags, ...currentValue.data().tags.general]\r\n        accumulator.players = [...accumulator.players, ...currentValue.data().tags.players]\r\n        accumulator.teams = [...accumulator.teams, ...currentValue.data().tags.teams]\r\n        accumulator.tournaments = [...accumulator.tournaments, ...currentValue.data().tags.tournament]\r\n        return accumulator;\r\n    }\r\n\r\n\r\n    const selectTag = (label, count) => {\r\n        setSelectedTags([...selectedTags, [label, count]])\r\n    }\r\n\r\n    //pass setSelectedX and selectedX to function as parameters to eliminate duplicate code?\r\n    const deselectTag = (tagType, label) => {\r\n        \r\n        let index = 0;\r\n        switch(tagType){\r\n            case \"genTag\":\r\n                index = selectedTags.map((a)=> a[0]).indexOf(label)\r\n                const newSelectedTags = [...selectedTags]\r\n                newSelectedTags.splice(index, 1)\r\n                setSelectedTags(newSelectedTags)\r\n                break\r\n            case \"player\":\r\n                index = selectedPlayers.map((a)=> a[0]).indexOf(label)\r\n                console.log(index)\r\n                console.log(selectedPlayers)\r\n                const newSelectedPlayers = [...selectedPlayers]\r\n                newSelectedPlayers.splice(index, 1)\r\n                console.log(newSelectedPlayers)\r\n                console.log(selectedPlayers)\r\n                setSelectedPlayers(newSelectedPlayers)\r\n                break\r\n            case \"team\":\r\n                index = selectedTeams.map((a)=> a[0]).indexOf(label)\r\n                const newSelectedTeams = [...selectedTeams]\r\n                newSelectedTeams.splice(index, 1)\r\n                setSelectedTeams(newSelectedTeams)\r\n                break\r\n            case \"tournament\":\r\n                index = selectedTournaments.map((a)=> a[0]).indexOf(label)\r\n                const newSelectedTournaments = [...selectedTournaments]\r\n                newSelectedTournaments.splice(index, 1)\r\n                setSelectedTournaments(newSelectedTournaments)\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    useEffect(() =>{\r\n        if(videos){\r\n\r\n            setSortedVideos(videos.docs.sort((a,b) => {\r\n                const dateA = new Date(a.data().date.seconds*1000)\r\n                const dateB = new Date(b.data().date.seconds*1000)\r\n                if(dateA < dateB){\r\n                    return 1\r\n                }\r\n                else{\r\n                    return -1\r\n                }\r\n            }))\r\n\r\n\r\n            const tags = videos.docs.reduce(videoReducer, {genTags:[], players:[], teams:[], tournaments:[]});\r\n            const tagCountsArr = Object.entries(tags).map(([label, values]) => {\r\n                const counts = {}\r\n                values.forEach((val)=> {\r\n                    if(counts[val]){\r\n                        counts[val] += 1;\r\n                    }\r\n                    else{\r\n                        counts[val] = 1;\r\n                    }\r\n                })\r\n                return [label, counts];\r\n            })\r\n            \r\n            const tagCounts = Object.fromEntries(tagCountsArr)\r\n\r\n            setGenTags(tagCounts.genTags);\r\n            setPlayers(tagCounts.players);\r\n            setTeams(tagCounts.teams);\r\n            setTournaments(tagCounts.tournaments)\r\n        }\r\n    }, [videos])\r\n\r\n\r\n    //note: array select values come through as strings with comma separating elements\r\n    const handleChange = (e, category) => {\r\n        switch (category) {\r\n            case \"players\":\r\n                if(!selectedPlayers.map((elt) => elt[0]).includes(e.currentTarget.value)){\r\n                    setSelectedPlayers([...selectedPlayers, [e.currentTarget.value, players[e.currentTarget.value]]])\r\n                }\r\n                break\r\n            case \"teams\":\r\n                if(!selectedTeams.map((elt) => elt[0]).includes(e.currentTarget.value)){\r\n                    setSelectedTeams([...selectedTeams, [e.currentTarget.value, teams[e.currentTarget.value]]])\r\n                }\r\n                break\r\n            case \"tournaments\":\r\n                setSelectedTournaments([[e.currentTarget.value, tournaments[e.currentTarget.value]]])\r\n        }\r\n        e.currentTarget.selectedIndex = 0;\r\n    }\r\n\r\n    return (\r\n        <div style = {{backgroundColor: 'var(--red)', minHeight:'calc(100vh - 3rem)', width:'100%', display:'inline-block'}}>\r\n            <div className = \"content\" style = {{textAlign:'center'}}>\r\n                <h2 style = {{marginTop:'4rem', marginBottom:'.5rem'}}>Explore {videos ? videos.docs.length : \"#\"} Videos</h2>\r\n                <p className = \"small-heading\" style = {{marginTop: '0rem', marginBottom:'4rem'}}>Choose a tag below to filter</p>\r\n            </div>\r\n            <div className = \"content\">\r\n                <div style = {{paddingBottom:'2rem'}}>\r\n                    {genTags && Object.keys(genTags).map((tag)=> {\r\n                        return (<Tag \r\n                                    label = {tag} \r\n                                    count = {genTags[tag]} \r\n                                    select = {()=> selectTag(tag, genTags[tag])} \r\n                                    deselect = {() => deselectTag(\"genTag\", tag)}>\r\n                                </Tag>)\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className = \"content\">\r\n                <div className = \"grid three-column\" style = {{gap: '2rem'}}>\r\n                    <div className = \"dropdown-filter-section\">\r\n                        <select className = \"dropdown-filter\" onChange = {(e) => handleChange(e, \"players\")} >\r\n                            <option disabled selected hidden>Choose Players...</option>\r\n                            {players && Object.keys(players).map((label)=> (\r\n                                <option value = {label}>{label} ({players[label]})</option>\r\n                            ))}\r\n                        </select>\r\n                        <div>\r\n                            {selectedPlayers && selectedPlayers.map(([label, count]) => (\r\n                                <Tag label = {label} count = {count} isSelected deselect = {() => deselectTag(\"player\", label)}></Tag>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <select className = \"dropdown-filter\" onChange = {(e) => handleChange(e, \"teams\")}>\r\n                            <option disabled selected hidden>Choose Teams...</option>\r\n                            {teams && Object.keys(teams).map((label)=> (\r\n                                <option value = {label}>{label} ({teams[label]})</option>\r\n                            ))}\r\n                        </select>\r\n                        <div>\r\n                            {selectedTeams && selectedTeams.map(([label, count]) => (\r\n                                <Tag label = {label} count = {count} isSelected deselect = {() => deselectTag(\"team\", label)}></Tag>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <select className = \"dropdown-filter\" onChange = {(e) => handleChange(e, \"tournaments\")}>\r\n                            <option disabled selected hidden>Choose Tournament...</option>\r\n                            {tournaments && Object.keys(tournaments).map((label)=> (\r\n                                <option value = {label}>{label} ({tournaments[label]})</option>\r\n                            ))}\r\n                        </select>\r\n                        <div>\r\n                            {selectedTournaments && selectedTournaments.map(([label, count]) => (\r\n                                <Tag label = {label} count = {count} isSelected deselect = {() => deselectTag(\"tournament\", label)}></Tag>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <section>\r\n                <div className = \"grid three-column\">\r\n                    {videos && sortedVideos.filter((video) => {\r\n                        let keep = true;\r\n                        const {link, tags} = video.data()\r\n                        const tagsArray = Object.values(tags).flat()\r\n                        const filterTags = [...selectedTags.map((a) => a[0]), ...selectedPlayers.map((a)=> a[0]), ...selectedTeams.map((a)=> a[0]), ...selectedTournaments.map((a)=> a[0])]\r\n                        filterTags.forEach((tag) => {\r\n                            if(!tagsArray.includes(tag)){\r\n                                keep = false;\r\n                            }\r\n                        })\r\n                        return keep\r\n                    }).map((video) => {\r\n                        const videoId = video.data().link.split(\"?v=\")[1].split('&')[0];\r\n                        return (<iframe width=\"350\" height=\"197\" style = {{margin:'auto'}} src= {`https://www.youtube.com/embed/${videoId}`} frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>)\r\n                    })\r\n                    }\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideosPage","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\podcasts.js",["216","217"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport PodcastCard from '../components/podcast-card'\r\n\r\nimport {firebase} from '../firebase/config'\r\nimport {useCollection} from 'react-firebase-hooks/firestore'\r\n\r\nconst PodcastsPage = () => {\r\n\r\n    const db = firebase.firestore()\r\n\r\n    const [podcasts, loading, error] = useCollection(db.collection('podcasts'))\r\n    const [sortedPodcasts, setSortedPodcasts] = useState([])\r\n\r\n\r\n    useEffect(() =>{\r\n        if(podcasts){\r\n\r\n            setSortedPodcasts(podcasts.docs.sort((a,b) => {\r\n                const dateA = new Date(a.data().date.seconds*1000)\r\n                const dateB = new Date(b.data().date.seconds*1000)\r\n                if(dateA < dateB){\r\n                    return 1\r\n                }\r\n                else{\r\n                    return -1\r\n                }\r\n            }))\r\n        }\r\n    },[podcasts])\r\n    \r\n    return (\r\n        <div style = {{backgroundColor: 'var(--red)', minHeight:'calc(100vh - 3rem)', width:'100%', display:'inline-block'}}>\r\n            <div className = \"content\" style = {{textAlign:'center'}}>\r\n                <h2 style = {{marginTop:'4rem'}}>Explore # Podcasts</h2>\r\n                <section>\r\n                    <div className = \"grid three-column\">\r\n                        {sortedPodcasts.map((podcast)=> (\r\n                            <PodcastCard \r\n                                heading = {podcast.data().name} \r\n                                content = {podcast.data().desc} \r\n                                imgSrc = {podcast.data().img} \r\n                                altText = {podcast.data().name}\r\n                                link = {podcast.data().links.spotify}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PodcastsPage","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\firebase\\config.js",[],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\hooks\\useCollectionData.js",["218","219"],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\free-agent-card.js",["220","221","222"],"import React from 'react';\r\n\r\nimport Button from './button'\r\n\r\nconst FreeAgentCard = ({data, user, deleteSelf}) => {\r\n\r\n    const {name, img, division, description, email, phone, rpr, creatorId} = data\r\n\r\n    return(\r\n        <div className = \"free-agent-card\">\r\n            <img src = {img || \"https://res.cloudinary.com/dicfhqxoo/image/upload/v1611984880/profilepicperson_hdwfcw.png\"} style = {{width: '4rem', height: '4rem', borderRadius: \"50%\"}}></img>\r\n            <div style = {{padding:'0 1rem'}}>\r\n                <h3 style = {{fontSize: '1.25rem', lineHeight: '1.25rem', color:'#333'}}>{name} ({rpr})</h3>\r\n                <p style = {{margin:\"0px\", color: 'var(--red)', fontWeight: '500'}}>{division}</p>\r\n                <p style = {{margin:\".15rem 0\", fontSize:'.5rem'}}>{email}</p>\r\n                <p style = {{margin:\".15rem 0\", fontSize:'.5rem'}}>{phone}</p>\r\n            </div>\r\n            {user && user.uid == creatorId && <Button size = \"small\" color = \"red\" label = \"X\" styles = {{height:'fit-content', margin:'auto'}} onClick = {deleteSelf}></Button>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FreeAgentCard;","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\tag.js",[],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\podcast-card.js",[],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\current-card.js",[],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\admin.js",["223","224","225","226","227","228","229","230"],"import React, {useState, useEffect} from 'react';\r\nimport Button from '../components/button'\r\n\r\nimport {firebase} from '../firebase/config'\r\nimport {useCollection} from 'react-firebase-hooks/firestore'\r\n\r\nimport axios from 'axios'\r\n\r\nconst AdminPage = () => {\r\n    \r\n    const db = firebase.firestore();\r\n\r\n    const [canAddTournament,setCanAddTournament] = useState(false)\r\n    const [canAddVideo,setCanAddVideo] = useState(false)\r\n    const [tournamentPass, setTournamentPass] = useState(\"\")\r\n    const [contentPass, setContentPass] = useState(\"\")\r\n\r\n    const [tournamentFormOpen, setTournamentFormOpen] = useState(false)\r\n\r\n    const tournamentCode = \"hi\";\r\n    const contentCode = \"hello\";\r\n\r\n    useEffect(()=>{\r\n        console.log(tournamentPass)\r\n        if(tournamentPass == tournamentCode){\r\n            setCanAddTournament(true)\r\n        }\r\n    },[tournamentPass])\r\n\r\n    useEffect(() => {\r\n        console.log(contentPass)\r\n        if(contentPass == contentCode){\r\n            setCanAddVideo(true)\r\n        }\r\n    },[contentPass])\r\n\r\n    const submitTournament = (e) =>{\r\n        e.preventDefault();\r\n        const tournament = {}\r\n        const form = e.currentTarget.parentNode\r\n\r\n        Array.from(form.children).forEach((node)=>{\r\n            if(node.nodeName == \"INPUT\"){\r\n                let value = null\r\n                if(node.id == \"date\" || node.id == \"regEndDate\"){\r\n                    value = new Date(node.value)\r\n                } \r\n                else if(node.id == \"img\"){\r\n                    value = node.files[0]\r\n                }\r\n                else{\r\n                    value = node.value\r\n                }\r\n\r\n                tournament[node.id] = value\r\n            }\r\n        })\r\n\r\n        const file = tournament.img\r\n        const formData = new FormData()\r\n        formData.append(\"file\",file)\r\n        formData.append(\"upload_preset\", \"spike_hub_tournament\")\r\n        axios({\r\n            url: \"https://api.cloudinary.com/v1_1/dicfhqxoo/upload\",\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n            },\r\n            data: formData\r\n        }).then((res) => {\r\n            tournament.img = res.data.secure_url;\r\n            tournament.bracketLink = null;\r\n            tournament.liveLink = null;\r\n            tournament.numTeams = null;\r\n            tournament.results = null;\r\n            tournament.freeAgents = [];\r\n            tournament.slug = tournament.name.replace(\" \",\"-\").toLowerCase();\r\n            db.collection('tournaments').doc(tournament.slug).set(tournament)\r\n\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div style = {{minHeight: \"calc(100vh - 3rem)\", backgroundColor:'var(--light-gray)', padding:'3rem 0'}}>\r\n            <section style = {{marginTop: \"0\"}}>\r\n                <h3 style = {{marginTop: '1rem'}}>Tournament Host Dashboard</h3>\r\n                {!canAddTournament ? (<>\r\n                <h4 style = {{marginTop: '1rem'}}>Please input the tournament host password</h4>\r\n                <input \r\n                    placeholder = \"Enter Pass\" \r\n                    className = \"search\" \r\n                    value = {tournamentPass}\r\n                    onChange = {(e) => setTournamentPass(e.target.value)}\r\n                    style = {{display:'block', margin: 'auto', marginBottom: '2rem'}}\r\n                ></input>\r\n                </>)\r\n                :\r\n                (<>\r\n                    <h4 style = {{marginTop: '1rem'}}>Welcome! Click the button below to add a tournament</h4>\r\n                    {!tournamentFormOpen ? \r\n                    (<div style = {{margin: '1rem auto'}}>\r\n                        <Button size = \"large\" color = \"red\" label = \"Add A Tournament\" styles = {{margin:'0 1rem'}} onClick = {()=> setTournamentFormOpen(true)}></Button>\r\n                    </div>)\r\n                    :\r\n                    (<form>\r\n                        <label className = \"form-label\">Tournament Name</label>\r\n                        <input className = \"form-input\" placeholder = \"\" id = \"name\"></input>\r\n                        <label className = \"form-label\">Host</label>\r\n                        <input className = \"form-input\" placeholder = \"Host or organization name\" id = \"host\"></input>\r\n                        <label className = \"form-label\">Location</label>\r\n                        <input className = \"form-input\" placeholder = \"City, ST\" id = \"location\"></input>\r\n                        <label className = \"form-label\">Divisions</label>\r\n                        <input className = \"form-input\" placeholder = \"Comma-separated list\" id = \"divisions\"></input>\r\n                        <label className = \"form-label\">Date</label>\r\n                        <input className = \"form-input\" type = \"date\" id = \"date\"></input>\r\n                        <label className = \"form-label\">Registration End Date</label>\r\n                        <input className = \"form-input\" type = \"date\" id = \"regEndDate\"></input>\r\n                        <label className = \"form-label\">Registration Link</label>\r\n                        <input className = \"form-input\" placeholder = \"Link to registration form\" id = \"link\"></input>\r\n                        <label className = \"form-label\">Short Description</label>\r\n                        <input className = \"form-input\" placeholder = \"Blurb about tournament\" id = \"desc\"></input>\r\n                        <label className = \"form-label\">Picture</label>\r\n                        <input className = \"form-input\" type = \"file\" style = {{backgroundColor:'white'}} id = \"img\"></input>\r\n                        <Button size = \"medium\" color = \"red\" label = \"Submit\" styles = {{width: 'fit-content'}} onClick = {submitTournament}></Button>\r\n                    </form>)}\r\n                </>)\r\n                }          \r\n            </section>\r\n\r\n            <section style = {{marginBottom:'0'}}>\r\n                <h3 style = {{marginTop: '1rem'}}>Content Creator Dashboard</h3>\r\n                {!canAddVideo ? (<>\r\n                <h4 style = {{marginTop:'1rem'}}>COMING SOON!</h4>\r\n                {/*<input \r\n                    placeholder = \"Enter Pass\" \r\n                    className = \"search\" \r\n                    value = {contentPass}\r\n                    onChange = {(e) => setContentPass(e.target.value)}\r\n                    style = {{display:'block', margin: 'auto', marginBottom: '2rem'}}\r\n                ></input>*/}\r\n                </>)\r\n                :\r\n                (<div style = {{margin: '1rem auto'}}>\r\n                    <h4 style = {{marginTop: '1rem'}}>Welcome! Click one of the buttons below to add content!</h4>\r\n                    <Button size = \"large\" color = \"red\" label = \"Add A Video\" styles = {{margin:'0 1rem'}}></Button>\r\n                    <Button size = \"large\" color = \"red\" label = \"Add A Podcast\" styles = {{margin:'0 1rem'}}></Button>\r\n                </div>)\r\n                }\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminPage;","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\sign-in.js",["231","232"],"import React, {useState, useEffect} from 'react';\r\nimport {Route, Link, useHistory} from 'react-router-dom'\r\nimport Button from '../components/button'\r\n\r\nimport {firebase} from '../firebase/config'\r\n\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nconst SignInPage = () => {\r\n\r\n    const auth = firebase.auth();\r\n    const db = firebase.firestore();\r\n    let history = useHistory();\r\n\r\n    const logIn = () =>{\r\n        auth.signInWithEmailAndPassword(email,password).then((res) => {\r\n            history.push('/')\r\n        })\r\n    }\r\n\r\n    const createAccount = () =>{\r\n\r\n\r\n        auth.createUserWithEmailAndPassword(email, password).then((res) => {\r\n            db.collection('users').doc(res.user.uid).set({email, organizations: [], tournaments: []}).then(() => {\r\n                history.push('/')\r\n            })\r\n\r\n        }\r\n        )\r\n        console.log(auth.currentUser)\r\n    }\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n\r\n    return (\r\n        <div style = {{minHeight: \"calc(100vh - 3rem)\", backgroundColor:'var(--light-gray)', display:'flex'}}>\r\n            <div className = \"login-container\">\r\n                <Route exact path = \"/sign-in\">\r\n                    <h3 style = {{marginBottom: '2rem'}}>Welcome to Spikehub</h3>\r\n                    <Link to = \"/sign-in/login\" className = \"link\">\r\n                        <Button size = 'medium' color = 'red' label = 'Login' styles = {{width:'100%'}} onClick = {null}></Button>\r\n                    </Link>\r\n                    <p style = {{margin: '.5rem auto'}}>or</p>\r\n                    <Link to = \"/sign-in/signup\" className = \"link\">\r\n                        <Button size = 'medium' color = 'red' label = 'Sign Up' styles = {{width:'100%'}} onClick = {null}></Button>\r\n                    </Link>\r\n                </Route>\r\n                        \r\n                <Route path = \"/sign-in/login\">\r\n                    <h4 style = {{marginTop:'0px', marginBottom:'1.5rem'}}>Welcome Back!</h4>\r\n                    <div className = 'login-input-pair'>\r\n                        <label className = \"form-label\">email</label>\r\n                        <input className = \"form-input\" placeholder = \"\" id = \"user\" value = {email} onChange = {(e)=>setEmail(e.target.value)}></input>\r\n                    </div>\r\n                    <div className = 'login-input-pair'>\r\n                        <label className = \"form-label\">password</label>\r\n                        <input className = \"form-input\" placeholder = \"\" id = \"pass\" value = {password} onChange = {(e)=>setPassword(e.target.value)}></input>\r\n                        <Button size = 'medium' color = 'red' label = 'Login' styles = {{width:'100%'}} onClick = {logIn}></Button>\r\n                    </div>\r\n                </Route>\r\n                <Route path = \"/sign-in/signup\">\r\n                    <h4 style = {{marginTop:'0px', marginBottom:'1.5rem'}}>Register for Spikehub</h4>\r\n                    <div className = 'login-input-pair'>\r\n                        <label className = \"form-label\">email</label>\r\n                        <input className = \"form-input\" placeholder = \"\" id = \"user\" value = {email} onChange = {(e)=>setEmail(e.target.value)}></input>\r\n                    </div>\r\n                    <div className = 'login-input-pair'>\r\n                        <label className = \"form-label\">password</label>\r\n                        <input className = \"form-input\" placeholder = \"\" id = \"pass\" value = {password} onChange = {(e)=>setPassword(e.target.value)}></input>\r\n                        <Button size = 'medium' color = 'red' label = 'Create Account' styles = {{width:'100%'}} onClick = {createAccount}></Button>\r\n                    </div>\r\n                </Route>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignInPage","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\account-dashboard.js",["233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251"],"import React, {useState, useEffect} from 'react';\r\nimport {Route, Link, useLocation, useHistory} from 'react-router-dom'\r\n\r\n\r\nimport {firebase} from '../firebase/config'\r\nimport {useCollection} from 'react-firebase-hooks/firestore'\r\nimport {useAuthState} from 'react-firebase-hooks/auth'\r\n\r\nimport generateID from '../utilities/generateID'\r\n\r\nimport EditTournamentPage from './edit-tournament'\r\nimport EditOrganizationPage from './edit-organization'\r\nimport Button from '../components/button'\r\nimport OrgCard from '../components/edit-org-card'\r\nimport TournamentCard from '../components/edit-tournament-card'\r\n\r\nimport axios from 'axios'\r\nimport { unstable_concurrentAct } from 'react-dom/test-utils';\r\n\r\n//TODO: Break into components for each sub-page\r\n\r\nconst AcctDashPage = ({user}) => {\r\n\r\n    const location = useLocation().pathname\r\n    const history = useHistory()\r\n    const db = firebase.firestore()\r\n    const auth = firebase.auth()\r\n\r\n\r\n    //profile state\r\n    const [initialUser, setInitialUser] = useState({})\r\n    const [userData, setUserData] = useState({})\r\n    const [tempImg, setTempImg] = useState(null)\r\n    const [changesSaved, setChangesSaved] = useState(true)\r\n\r\n    //tournament state\r\n\r\n    const [tournaments, tLoading, tError] = useCollection(db.collection('tournaments'))\r\n    const [organizations, oLoading, oError] = useCollection(db.collection('organizations'))\r\n\r\n    //when profile loads, set temporary local state\r\n    useEffect(()=>{\r\n        if(user){\r\n            db.collection('users').doc(user.uid).get().then((doc) => {\r\n                setInitialUser(doc.data())\r\n                setUserData(doc.data())\r\n            })\r\n        }\r\n    },[user])\r\n\r\n\r\n    useEffect(() => {\r\n        let changesMade = false;\r\n        for(let i of Object.keys(userData)){\r\n            if(userData[i] != initialUser[i]){\r\n                changesMade = true\r\n            }\r\n        }\r\n        setChangesSaved(!changesMade)\r\n    },[userData])\r\n\r\n\r\n    const updateUser = (key, value)=>{\r\n        setUserData({...userData, [key]: value})\r\n    }\r\n\r\n    const submitChanges = () =>{\r\n        user.updateProfile({\r\n            email: userData.email\r\n        })\r\n\r\n        if(tempImg){\r\n            const file = tempImg\r\n            const formData = new FormData()\r\n            formData.append(\"file\",file)\r\n            formData.append(\"upload_preset\", \"spike_hub\")\r\n            axios({\r\n                url: \"https://api.cloudinary.com/v1_1/dicfhqxoo/upload\",\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                },\r\n                data: formData\r\n            }).then((res) => {\r\n    \r\n                db.collection('users').doc(user.uid).update({... userData, img: res.data.secure_url}).then(()=>history.go(0))\r\n            })\r\n        }\r\n\r\n        else{\r\n            console.log(userData.fName)\r\n            db.collection('users').doc(user.uid).update(userData).then(() => history.go(0))\r\n\r\n        }\r\n    }\r\n\r\n    const getTimePeriod = (tournament) => {\r\n\r\n        const tournamentDate = new Date(tournament.data().date.seconds*1000) \r\n        const today = new Date()\r\n        const yesterday = new Date()\r\n        yesterday.setDate(today.getDate() - 1)\r\n\r\n        if(tournamentDate > today){\r\n            return \"upcoming\"\r\n        }\r\n\r\n        else if(tournamentDate < yesterday){\r\n            return \"past\"\r\n        }\r\n\r\n        else {\r\n            return \"current\"\r\n        }\r\n    }\r\n\r\n    const signOut = () => {\r\n        auth.signOut().then(() => history.push('/'))\r\n    }\r\n\r\n    return (\r\n        <div style = {{minHeight: \"calc(100vh - 3rem)\", display:'flex'}}>\r\n            <aside>\r\n                <div className = \"sidebar-tab main\">Account Dashboard</div>\r\n                <Link to = \"/account-dashboard/profile\">\r\n                    <div className = {`sidebar-tab ${location.includes(\"profile\")? \"active\":\"\"}`}>Profile</div>\r\n                </Link>\r\n                <Link to = \"/account-dashboard/tournaments\">\r\n                    <div className = {`sidebar-tab ${location.includes(\"tournaments\")? \"active\":\"\"}`}>Tournaments</div>\r\n                </Link>\r\n                <Link to = \"/account-dashboard/organizations\">\r\n                    <div className = {`sidebar-tab ${location.includes(\"organizations\")? \"active\":\"\"}`}>Organizations</div>\r\n                </Link>\r\n                <div className = {`sidebar-tab`} style = {{cursor:'pointer'}} onClick = {signOut}>Sign Out</div>\r\n            </aside>\r\n            <div className = \"dashboard-content\">\r\n                <Route path = \"/account-dashboard/profile\">\r\n                    <h3 className = \"dash-header\">Profile</h3>\r\n                    <h3 className = \"dash-subheader\">Profile Picture</h3>\r\n                    <input type = 'file' id = \"img\" accept = 'image/*' onChange = {(e)=> {setTempImg(e.target.files[0])}}></input>\r\n                    <img src ={tempImg ? URL.createObjectURL(tempImg) : userData && userData.img ? userData.img : \"https://res.cloudinary.com/dicfhqxoo/image/upload/v1611984880/profilepicperson_hdwfcw.png\" } style = {{width:'10rem', height:'10rem', display:'block', marginTop:'1rem'}} alt = \"Your Profile Picture Here\"></img>\r\n                    <h3 className = \"dash-subheader\">Personal Information</h3>\r\n                    <div className = \"dash-input-grid\">\r\n                        <div className = \"input-container\">\r\n                            <label className = \"dash-label\">First Name</label>\r\n                            <input className = \"dash-input\" placeholder = \"\" id = \"fName\" value = {userData.fName} onChange = {(e) => updateUser(e.target.id, e.target.value)}></input>\r\n                        </div>\r\n                        <div className = \"input-container\">\r\n                            <label className = \"dash-label\">Last Name</label>\r\n                            <input className = \"dash-input\" placeholder = \"\" id = \"lName\" value = {userData.lName}  onChange = {(e) => updateUser(e.target.id, e.target.value)}></input>\r\n                        </div>\r\n                        <div className = \"input-container\">\r\n                            <label className = \"dash-label\">Email</label>\r\n                            <input className = \"dash-input\" placeholder = \"\" id = \"email\" value = {userData.email}  onChange = {(e) => updateUser(e.target.id, e.target.value)}></input>\r\n                        </div>\r\n                        <div className = \"input-container-skinny\">\r\n                            <label className = \"dash-label\">Phone #</label>\r\n                            <input className = \"dash-input\" placeholder = \"\" id = \"phone\" value = {userData.phone} onChange = {(e) => updateUser(e.target.id, e.target.value)}></input>\r\n                        </div>\r\n                        <div className = \"input-container-skinny\">\r\n                            <label className = \"dash-label\">RPR</label>\r\n                            <input className = \"dash-input\" placeholder = \"\" id = \"rpr\" value = {userData.rpr} onChange = {(e) => updateUser(e.target.id, e.target.value)}></input>\r\n                        </div> \r\n                        {console.log(changesSaved)}\r\n                        <Button size = \"medium\" color = \"red\" label = \"Save Changes\" styles = {{width: 'fit-content', marginTop:'2rem'}} onClick = {submitChanges} isDisabled = {changesSaved}></Button>\r\n                    </div>\r\n                </Route>\r\n                <Route exact path = \"/account-dashboard/tournaments\">\r\n                    <div className = \"underlined\" style = {{display:'flex', justifyContent: 'space-between', position:'relative'}}>\r\n                        <h3 className = \"dash-header\">Tournaments</h3>\r\n                        <Link className = 'link' to = \"/account-dashboard/tournaments/new\">\r\n                            <Button color = \"red\" size = \"medium\" label = \"Add New\" styles = {{marginBottom:'1rem'}}></Button>\r\n                        </Link>\r\n                    </div>\r\n                    <h3 className = \"dash-subheader\">Current Tournaments</h3>\r\n                    <div className = \"grid three-column\" style = {{margin: '2rem 0'}}>\r\n                        {user && tournaments && tournaments.docs\r\n                            .filter((tournament)=> getTimePeriod(tournament) == \"current\" && tournament.data().host.id == user.uid)\r\n                            .map((tournament) => (\r\n                                <TournamentCard tournamentName = {tournament.data().name} slug = {tournament.data().slug} img = {tournament.data().img}></TournamentCard>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    <h3 className = \"dash-subheader\">Upcoming Tournaments</h3>\r\n                    <div className = \"grid three-column\" style = {{margin: '2rem 0'}}>\r\n                        {user && tournaments && tournaments.docs\r\n                            .filter((tournament)=> getTimePeriod(tournament) == \"upcoming\" && tournament.data().host.id == user.uid)\r\n                            .map((tournament) => (\r\n                                <TournamentCard tournamentName = {tournament.data().name} slug = {tournament.data().slug} img = {tournament.data().img}></TournamentCard>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    <h3 className = \"dash-subheader\">Past Tournaments</h3>\r\n                    <div className = \"grid three-column\" style = {{margin: '2rem 0'}}>\r\n                        {user && tournaments && tournaments.docs\r\n                            .filter((tournament)=> getTimePeriod(tournament) == \"past\" && tournament.data().host.id == user.uid)\r\n                            .map((tournament) => (\r\n                                <TournamentCard tournamentName = {tournament.data().name} slug = {tournament.data().slug} img = {tournament.data().img}></TournamentCard>\r\n                            ))\r\n                        }\r\n                    </div>\r\n\r\n                </Route>\r\n                <Route path = {[\"/account-dashboard/tournaments/new\",\"/account-dashboard/tournaments/edit\"]}>\r\n                    <EditTournamentPage user = {user}></EditTournamentPage>\r\n                </Route>\r\n                <Route exact path = \"/account-dashboard/organizations\">\r\n                    <div className = \"underlined\" style = {{display:'flex', justifyContent: 'space-between', position:'relative'}}>\r\n                        <h3 className = \"dash-header\">Organizations</h3>\r\n                        <Link className = 'link' to = \"/account-dashboard/organizations/new\">\r\n                            <Button color = \"red\" size = \"medium\" label = \"Add New\" styles = {{marginBottom:'1rem'}}></Button>\r\n                        </Link>\r\n                    </div>\r\n                    <div className = \"grid three-column\" style = {{margin: '2rem 0'}}>\r\n                        {user && organizations && organizations.docs\r\n                            .filter((org)=> org.data().owner == user.uid)\r\n                            .map((org) => (\r\n                                <OrgCard orgName = {org.data().name} id = {org.data().id} img = {org.data().img}></OrgCard>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </Route>\r\n                <Route path = {[\"/account-dashboard/organizations/new\",\"/account-dashboard/organizations/edit\"]}>\r\n                    <EditOrganizationPage user = {user}></EditOrganizationPage>\r\n                </Route>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AcctDashPage;","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\utilities\\generateID.js",[],"D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\edit-organization.js",["252","253","254","255","256","257","258","259","260","261","262","263"],"import React, {useState, useEffect} from 'react';\r\nimport {Route, Link, useLocation, useHistory} from 'react-router-dom'\r\n\r\nimport {firebase} from '../firebase/config'\r\nimport {useCollection} from 'react-firebase-hooks/firestore'\r\nimport generateID from '../utilities/generateID'\r\n\r\nimport Button from '../components/button'\r\nimport OrgCard from '../components/edit-org-card'\r\n\r\nimport axios from 'axios'\r\n\r\nconst EditOrganizationPage = ({user}) =>{\r\n\r\n    const history = useHistory();\r\n    const pathname = useLocation().pathname;\r\n    const query = new URLSearchParams(useLocation().search)\r\n    const db = firebase.firestore();\r\n\r\n\r\n\r\n    //organization state\r\n    const [organizations, loading, error] = useCollection(db.collection('organizations'))\r\n    const [orgList, setOrgList] = useState([])\r\n    const [initialOrg, setInitialOrg] = useState({name: '', location: '', link:'', desc:''})\r\n    const [orgData, setOrgData] = useState({})\r\n    const [changesSaved, setChangesSaved] = useState(true)\r\n    const [dataValidationError,setDataValidationError] = useState(null)\r\n    const [deleteConfirm, setDeleteConfirm] = useState(false)\r\n    const [tempImg, setTempImg] = useState(null)\r\n\r\n    useEffect(()=> {\r\n        if(organizations && pathname.includes('/organizations/edit')){\r\n            setInitialOrg(organizations.docs.find((org) => org.data().id == query.get(\"id\")).data())\r\n            setOrgData(organizations.docs.find((org) => org.data().id == query.get(\"id\")).data())\r\n        }\r\n    },[organizations])\r\n\r\n    useEffect(()=>{\r\n        if(user){\r\n            db.collection('users').doc(user.uid).get().then((doc) => {\r\n                setOrgList(doc.data().organizations)\r\n            })\r\n        }\r\n    },[user])\r\n\r\n\r\n    useEffect(() => {\r\n        let changesMade = false;\r\n\r\n        for(let i of Object.keys(orgData)){\r\n            if(orgData[i] != initialOrg[i]){\r\n                changesMade = true\r\n            }\r\n        }\r\n\r\n        if(tempImg){\r\n            changesMade = true;\r\n        }\r\n\r\n        setChangesSaved(!changesMade)\r\n    },[orgData, tempImg])\r\n\r\n    const updateOrg= (key, value)=>{\r\n        setOrgData({...orgData, [key]: value})\r\n    }\r\n\r\n    const addNewOrg = (e)=>{\r\n        e.preventDefault();\r\n\r\n        //can all be done in validateData\r\n        const missingData = validateData()\r\n        if(missingData.length > 0){\r\n            setDataValidationError(`*Make sure your organization has a ${missingData[0]}`)\r\n            return\r\n        }\r\n\r\n        //better way than storing id inside org's data object?\r\n        if(!orgData.id){\r\n            orgData.id = generateID()\r\n        }\r\n        orgData.owner = user.uid\r\n\r\n        const orgRef = db.collection('organizations').doc(orgData.id)\r\n\r\n        console.log('here')\r\n        db.collection('users').doc(user.uid).update({organizations: [...orgList, orgData.id]})\r\n\r\n        if(tempImg){\r\n            const file = tempImg\r\n            const formData = new FormData()\r\n            formData.append(\"file\",file)\r\n            formData.append(\"upload_preset\", \"spike_hub_organization\")\r\n            axios({\r\n                url: \"https://api.cloudinary.com/v1_1/dicfhqxoo/upload\",\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                },\r\n                data: formData\r\n            }).then((res) => {\r\n                orgRef.get().then((snapshot) => {\r\n                    if(snapshot.exists){\r\n                        orgRef.update({...orgData,img: res.data.secure_url})\r\n                    }\r\n                    else{\r\n                        orgRef.set({...orgData,img: res.data.secure_url})\r\n                    }\r\n                })\r\n                .then(()=>history.push(\"/account-dashboard/organizations\"))\r\n            })\r\n        }\r\n        else{\r\n            orgRef.get().then((snapshot) => {\r\n                if(snapshot.exists){\r\n                    orgRef.update(orgData)\r\n                }\r\n                else{\r\n                    orgRef.set(orgData)\r\n                }\r\n            })\r\n            .then(() => history.push(\"/account-dashboard/organizations\"))\r\n        }\r\n    }\r\n\r\n    const deleteOrg = () => {\r\n        db.collection(\"organizations\").doc(orgData.id).delete()\r\n        .then(() => db.collection('users').doc(user.uid).update({organizations: orgList.filter((orgID) => !(orgID == orgData.id))}))\r\n        .then(history.push(\"/account-dashboard/organizations\"))\r\n\r\n    }\r\n\r\n    const validateData = () => {\r\n        const missingData = []\r\n        \r\n        if(!orgData.name){\r\n            missingData.push(\"name\")\r\n        }\r\n        return missingData\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <> \r\n\r\n                <div className = \"underlined\" style = {{display:'flex', justifyContent: 'space-between', position:'relative'}}>\r\n                    <h3 className = \"dash-header\">{organizations ? (orgData.id ? initialOrg.name : \"New Organization\"):null}</h3>\r\n                </div>\r\n                <input type = 'file' id = \"img\" accept = 'image/*' onChange = {(e)=> {setTempImg(e.target.files[0])}} style = {{marginTop:'3rem'}}></input>\r\n                <img src ={tempImg ? URL.createObjectURL(tempImg) : orgData && orgData.img ? orgData.img : \"https://res.cloudinary.com/dicfhqxoo/image/upload/v1612321575/tournament-icon_ydpdbe.png\" } style = {{width:'10rem', height:'10rem', display:'block', marginTop:'1rem'}} alt = \"Organization Photo Here\"></img>\r\n\r\n                <div className = \"dash-input-grid\" style = {{marginTop:'3rem'}}>\r\n                    <div className = \"input-container\">\r\n                        <label className = \"dash-label\">Organization Name</label>\r\n                        <input className = \"dash-input\" placeholder = \"\" id = \"name\" value = {orgData.name} onChange = {(e) => updateOrg(e.target.id, e.target.value)}></input>\r\n                    </div>\r\n                    <div className = \"input-container\">\r\n                        <label className = \"dash-label\">Location</label>\r\n                        <input className = \"dash-input\" placeholder = \"\" id = \"location\"  value = {orgData.location} onChange = {(e) => updateOrg(e.target.id, e.target.value)}></input>\r\n                    </div>\r\n                    <div className = \"input-container wide\">\r\n                        <label className = \"dash-label\">Website Link</label>\r\n                        <input className = \"dash-input\" placeholder = \"\" id = \"link\" value = {orgData.link} onChange = {(e) => updateOrg(e.target.id, e.target.value)}></input>\r\n                    </div>\r\n                    <div className = \"input-container wide\">\r\n                        <label className = \"dash-label\">Short Description</label>\r\n                        <input className = \"dash-input\" placeholder = \"\" id = \"desc\" value = {orgData.desc} onChange = {(e) => updateOrg(e.target.id, e.target.value)}></input>\r\n                    </div>\r\n                </div>\r\n\r\n                <div style = {{display:'flex', justifyContent:'space-between', width:'100%'}}>\r\n                    <div>\r\n                        <Link className = \"link\" to= \"/account-dashboard/organizations\">\r\n                            <Button size = \"medium\" color = \"dark-gray\" label = \"Cancel\" styles = {{width: 'fit-content', marginTop:'1rem', marginRight:'1rem'}} ></Button>\r\n                        </Link>\r\n                        <Button size = \"medium\" color = \"red\" label = {orgData.id ? \"Save Organization\":\"Add Organization\"} styles = {{width: 'fit-content', marginTop:'1rem'}} onClick = {(e) => addNewOrg(e)} isDisabled = {changesSaved}></Button> \r\n                    </div>\r\n                    {Object.keys(initialOrg).length > 0 && <Button size = \"medium\" color = \"red\" label = {deleteConfirm ? \"Confirm Delete\":\"Delete\"} styles = {{width: 'fit-content', marginTop:'1rem'}} onClick = {deleteConfirm ? deleteOrg : () => setDeleteConfirm(true)}></Button>}\r\n                </div>\r\n\r\n                {dataValidationError && <p style = {{fontSize:'.8rem'}}>{dataValidationError}</p>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditOrganizationPage\r\n","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\edit-org-card.js",["264"],"import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst OrgCard = ({orgName, img, id}) => {\r\n\r\n    console.log(orgName)\r\n\r\n    return (\r\n        <Link className = \"link upcoming-card\" to = {`/account-dashboard/organizations/edit?id=${id}`}>\r\n                <div style = {{backgroundColor:'var(--light-gray)'}}> \r\n                    <img src = {img || \"https://res.cloudinary.com/dicfhqxoo/image/upload/v1612321575/tournament-icon_ydpdbe.png\"} style = {{width:'100%', height:'100%', objectFit: 'cover'}}></img>\r\n                </div>\r\n                <div style = {{padding:'.5rem'}}>\r\n                    <h4 className = \"upcoming-card--header\">{orgName}</h4>\r\n                </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default OrgCard","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\edit-tournament-card.js",["265"],"import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst TournamentCard = ({tournamentName, date, img, slug}) => {\r\n    return (\r\n        <Link className = \"link upcoming-card\" to = {`/account-dashboard/tournaments/edit?id=${slug}`}>\r\n                {console.log(img)}\r\n                <div style = {{backgroundColor:'var(--light-gray)'}}> \r\n                    <img src = {img || \"https://res.cloudinary.com/dicfhqxoo/image/upload/v1612321575/tournament-icon_ydpdbe.png\"} style = {{width:'100%', height:'100%', objectFit: 'cover'}}></img>\r\n                </div>\r\n                <div style = {{padding:'.5rem'}}>\r\n                    <h5>{date}</h5>\r\n                    <h4 className = \"upcoming-card--header\">{tournamentName}</h4>\r\n                </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default TournamentCard","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\pages\\edit-tournament.js",["266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292"],"import React, {useState, useEffect} from 'react';\r\nimport {Route, Link, useLocation, useHistory} from 'react-router-dom'\r\n\r\nimport {firebase} from '../firebase/config'\r\nimport {useCollection} from 'react-firebase-hooks/firestore'\r\nimport generateID from '../utilities/generateID'\r\n\r\nimport Button from '../components/button'\r\nimport OrgCard from '../components/edit-org-card'\r\nimport SelectedItem from '../components/selected-item'\r\n\r\nimport axios from 'axios'\r\nimport areEqual from '../utilities/areEqual';\r\n\r\nconst EditTournamentPage = ({user}) =>{\r\n\r\n    const history = useHistory();\r\n    const pathname = useLocation().pathname;\r\n    const query = new URLSearchParams(useLocation().search)\r\n    const db = firebase.firestore();\r\n\r\n    const [userData, setUserData] = useState({})\r\n\r\n    const [organizations, oLoading, oError] = useCollection(db.collection('organizations'))\r\n\r\n    //tournament state\r\n    const [tournaments, tLoading, tError] = useCollection(db.collection('tournaments'))\r\n    const [tournamentList, setTournamentList] = useState([])\r\n    const [initialTournament, setInitialTournament] = useState({})\r\n    const [tournamentData, setTournamentData] = useState({})\r\n    const [changesSaved, setChangesSaved] = useState(true)\r\n\r\n    const [tempImg, setTempImg] = useState(null)\r\n    const [tempDivision, setTempDivision] = useState(\"\")\r\n    const [tempResults, setTempResults] = useState({})\r\n    const [schedule, setSchedule] = useState([])\r\n//    const [results, setResults] = useState({})\r\n\r\n    const [deleteConfirm, setDeleteConfirm] = useState(false)\r\n    const [dataValidationError, setDataValidationError] = useState(\"\")\r\n\r\n\r\n    useEffect(()=> {\r\n        if(tournaments && pathname.includes('/tournaments/edit')){\r\n            const data = tournaments.docs.find((tournament) => tournament.data().slug == query.get(\"id\")).data()\r\n\r\n            setInitialTournament({...data, date: new Date(data.date.seconds*1000), regEndDate: new Date(data.regEndDate.seconds*1000)})\r\n            setTournamentData({...data, date: new Date(data.date.seconds*1000), regEndDate: new Date(data.regEndDate.seconds*1000)})\r\n            if(data.schedule){\r\n                setSchedule(data.schedule)\r\n            }\r\n\r\n        }\r\n    },[tournaments])\r\n\r\n    useEffect(()=>{\r\n        if(user){\r\n            db.collection('users').doc(user.uid).get().then((doc) => {\r\n                setTournamentList(doc.data().tournaments)\r\n                setUserData(doc.data())\r\n            })\r\n        }\r\n    },[user])\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        let tempPrizes = tournamentData.prizes\r\n        \r\n        if(tournamentData.divisions && tournamentData.prizes){\r\n            console.log(Object.keys(tournamentData.prizes));\r\n            if(!areEqual(tournamentData.divisions.sort(), Object.keys(tournamentData.prizes).sort())){\r\n                tournamentData.divisions.forEach((division, index) => {\r\n                    if(!tournamentData.prizes[division]){\r\n                        tempPrizes[division] = [\"\",\"\",\"\"];\r\n                    }\r\n                })\r\n                Object.keys(tournamentData.prizes).forEach((division, index) => {\r\n                    if(!tournamentData.divisions.find((elt) => elt == division)){\r\n                        delete tempPrizes[division]\r\n                    }\r\n                })\r\n                updateTournament(\"prizes\", tempPrizes)\r\n            }\r\n        }\r\n\r\n\r\n        if(tournamentData.divisions && tournamentData.results){\r\n            if(!areEqual(tournamentData.divisions.sort(), Object.keys(tournamentData.results).sort())){\r\n                tournamentData.divisions.forEach((division, index) => {\r\n                    if(!tournamentData.results[division]){\r\n                        tempResults[division] = {1:[\"\",\"\",\"\"],2:[\"\",\"\",\"\"],3:[\"\",\"\",\"\"]}\r\n                    }\r\n                })\r\n                Object.keys(tournamentData.results).forEach((division, index) => {\r\n                    if(!tournamentData.divisions.find((elt) => elt == division)){\r\n                        delete tempResults[division]\r\n                    }\r\n                })\r\n                updateTournament(\"results\", tempResults)\r\n            }\r\n        }\r\n\r\n        if(tournamentData.divisions && !tournamentData.prizes){\r\n            let emptyPrizes = {}\r\n            tournamentData.divisions.forEach((division) => {\r\n                emptyPrizes[division] = [\"\",\"\",\"\"]\r\n            })\r\n            updateTournament(\"prizes\", emptyPrizes)\r\n        }\r\n\r\n        if(tournamentData.divisions && !tournamentData.results){\r\n            let emptyResults = {}\r\n            tournamentData.divisions.forEach((division) => {\r\n                emptyResults[division] = {1:[\"\",\"\",\"\"],2:[\"\",\"\",\"\"],3:[\"\",\"\",\"\"]}\r\n                console.log(emptyResults[division][0])\r\n            })\r\n            updateTournament(\"results\", emptyResults)\r\n        }\r\n\r\n        const changesMade = !areEqual(tournamentData, initialTournament) || tempImg\r\n\r\n        setChangesSaved(!changesMade)\r\n    },[tournamentData, tempImg])\r\n\r\n\r\n    useEffect(() => {\r\n        if(tournamentData.schedule && schedule){\r\n            setTournamentData({\r\n                ...tournamentData, \r\n                schedule: schedule.filter((val)=> !areEqual(val, {time:'', event:''}))\r\n            })\r\n        }\r\n    }, [schedule])\r\n\r\n    const updateTournament= (key, value)=>{\r\n\r\n        let val = value;\r\n\r\n        if(key == \"host\"){\r\n            if(value == user.uid){\r\n                val = {type: \"user\", id: value}\r\n            }\r\n            else{\r\n                val = {type: \"organization\", id: value}\r\n            }\r\n        }\r\n        else if(key == \"date\" || key == \"regEndDate\"){\r\n            val = new Date(value + \"T00:00:00\")\r\n        }\r\n\r\n\r\n        setTournamentData({...tournamentData, [key]: val})\r\n    }\r\n\r\n\r\n    const addDivision = () => {\r\n        \r\n        let tempDivisions = []\r\n        if(tournamentData.divisions){\r\n            tempDivisions = [...tournamentData.divisions];\r\n        }\r\n        tempDivisions.push(tempDivision)\r\n\r\n        updateTournament(\"divisions\", tempDivisions)\r\n        setTempDivision(\"\")\r\n    }\r\n\r\n    const deleteDivision = (division) => {\r\n        let tempDivisions = [...tournamentData.divisions]\r\n        let index = tempDivisions.findIndex((elt) => elt == division)\r\n        tempDivisions.splice(index, 1)\r\n\r\n        updateTournament(\"divisions\", tempDivisions)\r\n    }\r\n\r\n    const updateSchedule = (index, time, event) => {\r\n        let tempSched = [...schedule];\r\n        tempSched[index] = {time, event}\r\n\r\n        setSchedule(tempSched)\r\n    }\r\n\r\n    const updatePrizes = (key, index, value) => {\r\n        let tempPrizes = {...tournamentData.prizes};\r\n        tempPrizes[key][index] = value;\r\n       updateTournament(\"prizes\", tempPrizes)\r\n    }\r\n\r\n    const updateResults= (key, placement, index, value) => {\r\n        let tempResults = {...tournamentData.results};\r\n        tempResults[key][placement][index] = value;\r\n       updateTournament(\"results\", tempResults)\r\n    }\r\n\r\n    const addNewTournament = (e)=>{\r\n        e.preventDefault();\r\n\r\n        let missingData = validateData()\r\n        if(missingData.length > 0){\r\n            if(missingData.length >= 2){\r\n                missingData[missingData.length-1] = \"and \" + missingData[missingData.length-1]\r\n                if(missingData.length == 2){\r\n                    setDataValidationError(`*Make sure your tournament has a ${missingData.join(\" \")}`)\r\n                }\r\n                else{\r\n                    setDataValidationError(`*Make sure your tournament has a ${missingData.join(\", \")}`)\r\n                }\r\n                return\r\n            }\r\n            if(missingData[0] == \"at least 1 division\"){\r\n                setDataValidationError(`Make sure your tournament has ${missingData[0]}`)\r\n                return\r\n            }\r\n            setDataValidationError(`Make sure your tournament has a ${missingData[0]}`)\r\n            console.log(missingData)\r\n            return\r\n        }\r\n        else{\r\n\r\n        }\r\n\r\n\r\n        tournamentData.slug = tournamentData.name.replaceAll(\" \",\"-\").toLowerCase();\r\n        tournamentData.owner = user.uid\r\n\r\n        if(!tournamentData.host){\r\n            tournamentData.host = {type: 'user', id: user.uid}\r\n        }\r\n\r\n        const tournamentRef = db.collection('tournaments').doc(tournamentData.slug)\r\n\r\n        db.collection('users').doc(user.uid).update({tournaments: [...tournamentList, tournamentData.slug]})\r\n\r\n        if(tempImg){\r\n            const file = tempImg\r\n            const formData = new FormData()\r\n            formData.append(\"file\",file)\r\n            formData.append(\"upload_preset\", \"spike_hub_tournament\")\r\n            axios({\r\n                url: \"https://api.cloudinary.com/v1_1/dicfhqxoo/upload\",\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                },\r\n                data: formData\r\n            }).then((res) => {\r\n                tournamentRef.get().then((snapshot) => {\r\n                    if(snapshot.exists){\r\n                        tournamentRef.update({...tournamentData,img: res.data.secure_url})\r\n                    }\r\n                    else{\r\n                        tournamentRef.set({...tournamentData,img: res.data.secure_url})\r\n                    }\r\n                })\r\n                .then(()=>history.push(\"/account-dashboard/tournaments\"))\r\n            })\r\n        }\r\n        else{\r\n            tournamentRef.get().then((snapshot) => {\r\n                if(snapshot.exists){\r\n                    tournamentRef.update(tournamentData)\r\n                }\r\n                else{\r\n                    tournamentRef.set(tournamentData)\r\n                }\r\n            })\r\n            .then(() => history.push(\"/account-dashboard/tournaments\"))\r\n        }\r\n    }\r\n\r\n    const deleteTournament = () => {\r\n        db.collection(\"tournaments\").doc(tournamentData.slug).delete()\r\n        .then(() => db.collection('users').doc(user.uid).update({tournaments: tournamentList.filter((tournamentID) => !(tournamentID == tournamentData.slug))}))\r\n        .then(history.push(\"/account-dashboard/tournaments\"))\r\n\r\n    }\r\n\r\n    const validateData = () => {\r\n        const missingData = []\r\n        \r\n        if(!tournamentData.name){\r\n            missingData.push(\"name\")\r\n        }\r\n        if(!tournamentData.date){\r\n            missingData.push(\"date\")\r\n        }\r\n        if(!tournamentData.date){\r\n            missingData.push(\"location\")\r\n        }\r\n        if(!tournamentData.regEndDate){\r\n            missingData.push(\"registration end date\")\r\n        }\r\n        if(!tournamentData.divisions || tournamentData.divisions.length == 0){\r\n            missingData.push(\"at least 1 division\")\r\n        }\r\n\r\n        return missingData\r\n    }\r\n\r\n\r\n    return (\r\n        <> \r\n                <div className = \"underlined\" style = {{display:'flex', justifyContent: 'space-between', position:'relative'}}>\r\n                    <h3 className = \"dash-header\">{tournaments ? (Object.keys(initialTournament).length > 0 ? initialTournament.name : \"New Tournament\") : null}</h3>\r\n                </div>\r\n                \r\n                <input type = 'file' id = \"img\" accept = 'image/*' onChange = {(e)=> {setTempImg(e.target.files[0])}} style = {{marginTop:'3rem'}}></input>\r\n                <img src ={tempImg ? URL.createObjectURL(tempImg) : tournamentData && tournamentData.img ? tournamentData.img : \"https://res.cloudinary.com/dicfhqxoo/image/upload/v1612321575/tournament-icon_ydpdbe.png\" } style = {{width:'10rem', height:'10rem', display:'block', marginTop:'1rem'}} alt = \"Tournament Photo Here\"></img>\r\n                <h3 className = \"dash-subheader\">Basic Info</h3>\r\n                <div className = \"dash-input-grid\">\r\n                    <div className = \"input-container\">\r\n                        <label className = \"dash-label\">Tournament Name</label>\r\n                        <input className = \"dash-input\" placeholder = \"\" id = \"name\" value = {tournamentData.name} onChange = {(e) => updateTournament(e.target.id, e.target.value)}></input>\r\n                    </div>\r\n                    <div className = \"input-container\">\r\n                        <label className = \"dash-label\">Host</label>\r\n                        <select className = \"dash-input\" id = \"host\"  value = {tournamentData.host && tournamentData.host.id} onChange = {(e) => updateTournament(e.target.id, e.target.value)}>\r\n                            <option value = {user && user.uid}>{userData && userData.fName + \" \" + userData.lName}</option>\r\n                            {organizations && Object.keys(userData).length > 0 && userData.organizations.map((orgID) => {\r\n                                const orgData = organizations.docs.find((org) => org.data().id == orgID).data();\r\n                                return (\r\n                                    <option value = {orgID}>{orgData.name}</option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                    <div className = \"input-container\">\r\n                        <label className = \"dash-label\">Date</label>\r\n                        <input className = \"dash-input\" type = \"date\" placeholder = \"\" id = \"date\"\r\n                            value = {tournamentData.date && tournamentData.date.toISOString().slice(0,10)} \r\n                            onChange = {(e) => updateTournament(e.target.id, e.target.value)}>\r\n                        </input>\r\n                    </div>\r\n                    <div className = \"input-container\">\r\n                        <label className = \"dash-label\">Registration End Date</label>\r\n                        <input className = \"dash-input\" type = \"date\" id = \"regEndDate\" \r\n                            value = {Object.keys(tournamentData).length > 0 && (tournamentData.regEndDate ? tournamentData.regEndDate.toISOString().slice(0,10):null)} \r\n                            onChange = {(e) => updateTournament(e.target.id, e.target.value)}>\r\n                        </input>\r\n                    </div>\r\n                    <div className = \"input-container\">\r\n                        <label className = \"dash-label\">Location</label>\r\n                        <input className = \"dash-input\" placeholder = \"\" id = \"location\" value = {tournamentData.location} onChange = {(e) => updateTournament(e.target.id, e.target.value)}></input>\r\n                    </div>\r\n                    <div className = \"input-container\">\r\n                        <label className = \"dash-label\">Registration Link</label>\r\n                        <input className = \"dash-input\" placeholder = \"\" id = \"link\" value = {tournamentData.link} onChange = {(e) => updateTournament(e.target.id, e.target.value)}></input>\r\n                    </div>\r\n\r\n                    <div className = \"input-container wide\">\r\n                        <label className = \"dash-label\">Description</label>\r\n                        <input className = \"dash-input\" placeholder = \"\" id = \"desc\" value = {tournamentData.desc} onChange = {(e) => updateTournament(e.target.id, e.target.value)}></input>\r\n                    </div>\r\n                    <div className = \"input-container wide\">\r\n                        <label className = \"dash-label\">Divisions</label>\r\n                    </div>\r\n                    <div className = 'input-container'>\r\n                        <input className = \"dash-input\" placeholder = \"Division Name\" id = \"divisions\" value = {tempDivision} onChange = {(e) => setTempDivision(e.target.value)}></input> \r\n                        {tournamentData.divisions && tournamentData.divisions.map((name) =>(\r\n                            <SelectedItem label = {name} remove = {deleteDivision}></SelectedItem>\r\n                        ))\r\n                        }\r\n                    </div>\r\n                    <div className = \"input-container\">\r\n                        <Button label = \"Add Division\" color = 'dark-gray' size = \"medium\" onClick = {addDivision}></Button>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <h3 className = \"dash-subheader\">Schedule</h3>\r\n                <div className = \"dash-input-grid\">\r\n                    {tournamentData && Object.keys(tournamentData).length > 0 && Object.keys(schedule).length > 0 && (\r\n                        <>\r\n                        <div className = \"input-container skinny\">\r\n                            <label className = \"dash-label\">Time</label>\r\n                        </div>\r\n                        <div className = \"input-container three-fourths\">\r\n                            <label className = \"dash-label\">Event</label>\r\n                        </div>\r\n                        </>\r\n                    )}\r\n\r\n                    {/* using value is a bit confusing*/}\r\n                    {schedule && Object.keys(schedule).length > 0 && schedule.map((elt, index)=> (\r\n                        <>\r\n                        <input className = \"dash-input\" value = {elt.time} onChange = {(e) => updateSchedule(index, e.target.value, elt.event)}></input>\r\n                        <input className = \"dash-input normal\" value = {elt.event} onChange = {(e) => updateSchedule(index, elt.time, e.target.value)}></input>\r\n                        <div style = {{display:'flex', alignItems:'center', marginBottom:'1rem'}}>\r\n                            <Button label = \"X\" size = 'small' color = 'red' onClick = {() => setSchedule(schedule.filter((val, i) => index != i))}>x</Button>\r\n                        </div>\r\n                        </>\r\n                    ))}\r\n                    <Button color = 'red' size = \"medium\" label = \"Add Scheduled Event\" styles = {{gridColumn: 'span 3'}} onClick = {() =>setSchedule([...schedule, {time:'', event: ''}])}></Button>\r\n                </div>\r\n                <h3 className = \"dash-subheader\">Prizes</h3>\r\n\r\n                    {tournamentData.prizes && Object.keys(tournamentData.prizes).length >0 ?\r\n                    <div className = \"dash-input-grid\">\r\n                        <div style = {{visibility:'hidden'}}></div>\r\n                        <label className = \"dash-label\">1st</label>\r\n                        <label className = \"dash-label\">2nd</label>\r\n                        <label className = \"dash-label\">3rd</label>\r\n                        {tournamentData.prizes && Object.keys(tournamentData.prizes).length > 0 && Object.keys(tournamentData.prizes).map((elt, index) => (\r\n                            <>\r\n                                <label className = \"dash-label\" style = {{margin:'auto 0', paddingBottom:'1rem'}}>{elt}</label>\r\n                                <input className = \"dash-input skinny\" value = {tournamentData.prizes[elt][0]} onChange = {(e) => updatePrizes(elt, 0, e.target.value)}></input>\r\n                                <input className = \"dash-input skinny\" value = {tournamentData.prizes[elt][1]} onChange = {(e) => updatePrizes(elt, 1, e.target.value)}></input>\r\n                                <input className = \"dash-input skinny\" value = {tournamentData.prizes[elt][2]} onChange = {(e) => updatePrizes(elt, 2, e.target.value)}></input>\r\n                            </>\r\n                        ))}\r\n                    </div>\r\n                    :\r\n                    <p className = \"input-container-wide\">Add divisions to edit prizes!</p>}\r\n\r\n                <h3 className = \"dash-subheader\">Happening-Now Links</h3>\r\n                <div className = \"dash-input-grid\">\r\n                    <div className = \"input-container\">\r\n                            <label className = \"dash-label\" >Bracket Link</label>\r\n                            <input className = \"dash-input\" id = \"bracketLink\" value = {tournamentData.bracketLink}  onChange = {(e) => updateTournament(e.target.id, e.target.value)}></input>\r\n                    </div>\r\n                    <div className = \"input-container\">\r\n                            <label className = \"dash-label\"  >Livestream Link</label>\r\n                            <input className = \"dash-input\" id = \"liveLink\" value = {tournamentData.liveLink} onChange = {(e) => updateTournament(e.target.id, e.target.value)}></input>\r\n                    </div>\r\n                </div>\r\n                <h3 className = \"dash-subheader\">Results</h3>\r\n                <div className = \"dash-input-grid\">\r\n                    <div className = \"input-container\">\r\n                        <label className = \"dash-label\">Number of Teams</label>\r\n                        <input className = \"dash-input\" placeholder = \"\" id = \"numTeams\" value = {tournamentData.numTeams} onChange = {(e) => updateTournament(e.target.id, e.target.value)}></input>\r\n                    </div>\r\n                </div>\r\n                {tournamentData.results && Object.keys(tournamentData.results).length > 0 ? \r\n\r\n                    <>\r\n                    <div className = \"dash-input-grid\" style = {{marginBottom:'1rem'}}>\r\n                        <div className = \"input-container\">\r\n                                <label className = \"dash-label\">Link to Full Results (e.g. bracket)</label>\r\n                                <input className = \"dash-input\"></input>\r\n                        </div>\r\n                    </div>\r\n                    {console.log(tournamentData.results)}\r\n\r\n                    {/*Assignment of value and onChange can be done programatically?*/}\r\n                    {Object.keys(tournamentData.results).map((elt, index) => (\r\n                    <div className = \"dash-input-grid\"  style = {{marginBottom:'2rem'}}>\r\n                        <label className = \"dash-label\" style = {{fontSize:'1rem', marginBottom:'2rem'}}>{elt} Results</label>\r\n                        <label className = \"dash-label\" style = {{marginTop:'2rem'}}>Team Name</label>\r\n                        <label className = \"dash-label\" style = {{marginTop:'2rem'}}>Player 1</label>\r\n                        <label className = \"dash-label\" style = {{marginTop:'2rem'}}>Player 2</label>\r\n    \r\n                        <label className = 'dash-label' style = {{margin:\"auto 0\", paddingBottom:'1rem'}}>1st Place</label>\r\n                        <input className = \"dash-input skinny\"  value = {tournamentData.results[elt][1][0]} onChange = {(e) => updateResults(elt, 1, 0, e.target.value)}></input>\r\n                        <input className = \"dash-input skinny\" value = {tournamentData.results[elt][1][1]} onChange = {(e) => updateResults(elt, 1, 1, e.target.value)}></input>\r\n                        <input className = \"dash-input skinny\" value = {tournamentData.results[elt][1][2]} onChange = {(e) => updateResults(elt, 1, 2, e.target.value)}></input>\r\n    \r\n                        <label className = 'dash-label' style = {{margin:\"auto 0\", paddingBottom:'1rem'}}>2nd Place</label>\r\n                        <input className = \"dash-input skinny\" value = {tournamentData.results[elt][2][0]} onChange = {(e) => updateResults(elt, 2, 0, e.target.value)}></input>\r\n                        <input className = \"dash-input skinny\" value = {tournamentData.results[elt][2][1]} onChange = {(e) => updateResults(elt, 2, 1, e.target.value)}></input>\r\n                        <input className = \"dash-input skinny\" value = {tournamentData.results[elt][2][2]} onChange = {(e) => updateResults(elt, 2, 2, e.target.value)}></input>\r\n    \r\n                        <label className = 'dash-label' style = {{margin:\"auto 0\", paddingBottom:'1rem'}}>3rd Place</label>\r\n                        <input className = \"dash-input skinny\" value = {tournamentData.results[elt][3][0]} onChange = {(e) => updateResults(elt, 3, 0, e.target.value)}></input>\r\n                        <input className = \"dash-input skinny\" value = {tournamentData.results[elt][3][1]} onChange = {(e) => updateResults(elt, 3, 1, e.target.value)}></input>\r\n                        <input className = \"dash-input skinny\" value = {tournamentData.results[elt][3][2]} onChange = {(e) => updateResults(elt, 3, 2, e.target.value)}></input>\r\n                    </div>\r\n                    ))}\r\n                    </>\r\n                :\r\n                <p className = \"input-container-wide\" style = {{marginTop:'0'}}>Add divisions to edit results!</p>\r\n                }\r\n\r\n                <div style = {{display:'flex', justifyContent:'space-between', width:'100%'}}>\r\n                    <div>\r\n                        <Link className = \"link\" to= \"/account-dashboard/tournaments\">\r\n                            <Button size = \"medium\" color = \"dark-gray\" label = \"Cancel\" styles = {{width: 'fit-content', marginTop:'1rem', marginRight:'1rem'}} ></Button>\r\n                        </Link>\r\n                        <Button size = \"medium\" color = \"red\" label = {Object.keys(initialTournament).length > 0 ? \"Save\":\"Add Tournament\"} styles = {{width: 'fit-content', marginTop:'1rem', marginRight:'1rem'}} onClick = {(e) => addNewTournament(e)} isDisabled = {changesSaved}></Button> \r\n\r\n                    </div>\r\n                    {Object.keys(initialTournament).length > 0 && <Button size = \"medium\" color = \"red\" label = {deleteConfirm ? \"Confirm Delete\":\"Delete\"} styles = {{width: 'fit-content', marginTop:'1rem'}} onClick = {deleteConfirm ? deleteTournament : () => setDeleteConfirm(true)}></Button>}\r\n                </div>\r\n                {dataValidationError && <p style = {{fontSize:'.8rem'}}>{dataValidationError}</p>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditTournamentPage","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\utilities\\areEqual.js",["293","294"],"const areEqual = (val1,val2) => {\r\n    \r\n    if(typeof val1 != typeof val2){\r\n        return false;\r\n    }\r\n\r\n    if(val1 === val2){\r\n        return true\r\n    }\r\n\r\n    let equal = true;\r\n\r\n    switch (typeof val1){\r\n        case \"object\": \r\n            if(Array.isArray(val1)){\r\n                val1.forEach((elt,index) =>{\r\n                    if(!areEqual(val2[index], elt)){\r\n                        equal = false;\r\n                    }\r\n                })\r\n                val2.forEach((elt,index) =>{\r\n                    if(!areEqual(val1[index], elt)){\r\n                        equal = false;\r\n                    }\r\n                })\r\n                return equal;\r\n            }\r\n            if (val1 instanceof Date){\r\n                return val1.getTime() == val2.getTime()\r\n            }\r\n            for(let i of Object.keys(val1)){\r\n                if(!areEqual(val1[i], val2[i])){\r\n                    equal = false;\r\n                }\r\n            }\r\n            return equal\r\n        case \"array\":\r\n\r\n            return equal\r\n        \r\n    }\r\n}\r\n\r\nexport default areEqual","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\components\\selected-item.js",["295"],"import React, {useState} from 'react';\r\n\r\nconst SelectedItem = ({label, remove}) => {\r\n\r\n    return(\r\n        <div className = \"selected-item\">\r\n            <p className = \"selected-item-text\">{label}</p>\r\n            <button className = \"selected-item-remove\"  onClick = {() => remove(label)}>X\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectedItem;","D:\\Ben\\Documents\\spikehub-v2\\spikehub\\src\\utilities\\formatDate.js",[],{"ruleId":"296","replacedBy":"297"},{"ruleId":"298","replacedBy":"299"},{"ruleId":"300","severity":1,"message":"301","line":1,"column":9,"nodeType":"302","messageId":"303","endLine":1,"endColumn":17},{"ruleId":"300","severity":1,"message":"304","line":1,"column":18,"nodeType":"302","messageId":"303","endLine":1,"endColumn":27},{"ruleId":"300","severity":1,"message":"305","line":13,"column":8,"nodeType":"302","messageId":"303","endLine":13,"endColumn":14},{"ruleId":"300","severity":1,"message":"306","line":25,"column":16,"nodeType":"302","messageId":"303","endLine":25,"endColumn":23},{"ruleId":"300","severity":1,"message":"307","line":25,"column":25,"nodeType":"302","messageId":"303","endLine":25,"endColumn":30},{"ruleId":"300","severity":1,"message":"308","line":19,"column":25,"nodeType":"302","messageId":"303","endLine":19,"endColumn":43},{"ruleId":"300","severity":1,"message":"309","line":19,"column":45,"nodeType":"302","messageId":"303","endLine":19,"endColumn":61},{"ruleId":"300","severity":1,"message":"310","line":20,"column":12,"nodeType":"302","messageId":"303","endLine":20,"endColumn":21},{"ruleId":"300","severity":1,"message":"311","line":20,"column":23,"nodeType":"302","messageId":"303","endLine":20,"endColumn":35},{"ruleId":"300","severity":1,"message":"312","line":20,"column":37,"nodeType":"302","messageId":"303","endLine":20,"endColumn":47},{"ruleId":"313","severity":1,"message":"314","line":31,"column":38,"nodeType":"315","messageId":"316","endLine":31,"endColumn":40},{"ruleId":"313","severity":1,"message":"314","line":52,"column":80,"nodeType":"315","messageId":"316","endLine":52,"endColumn":82},{"ruleId":"317","severity":1,"message":"318","line":111,"column":33,"nodeType":"319","endLine":111,"endColumn":111},{"ruleId":"300","severity":1,"message":"320","line":2,"column":15,"nodeType":"302","messageId":"303","endLine":2,"endColumn":28},{"ruleId":"321","severity":1,"message":"322","line":19,"column":7,"nodeType":"323","endLine":19,"endColumn":13,"suggestions":"324"},{"ruleId":"317","severity":1,"message":"318","line":44,"column":25,"nodeType":"319","endLine":44,"endColumn":244},{"ruleId":"300","severity":1,"message":"325","line":2,"column":26,"nodeType":"302","messageId":"303","endLine":2,"endColumn":32},{"ruleId":"300","severity":1,"message":"326","line":2,"column":41,"nodeType":"302","messageId":"303","endLine":2,"endColumn":47},{"ruleId":"300","severity":1,"message":"320","line":2,"column":55,"nodeType":"302","messageId":"303","endLine":2,"endColumn":68},{"ruleId":"300","severity":1,"message":"327","line":10,"column":8,"nodeType":"302","messageId":"303","endLine":10,"endColumn":19},{"ruleId":"300","severity":1,"message":"308","line":17,"column":25,"nodeType":"302","messageId":"303","endLine":17,"endColumn":43},{"ruleId":"300","severity":1,"message":"307","line":17,"column":46,"nodeType":"302","messageId":"303","endLine":17,"endColumn":51},{"ruleId":"321","severity":1,"message":"328","line":55,"column":7,"nodeType":"323","endLine":55,"endColumn":28,"suggestions":"329"},{"ruleId":"313","severity":1,"message":"314","line":75,"column":80,"nodeType":"315","messageId":"316","endLine":75,"endColumn":82},{"ruleId":"313","severity":1,"message":"314","line":78,"column":80,"nodeType":"315","messageId":"316","endLine":78,"endColumn":82},{"ruleId":"300","severity":1,"message":"304","line":1,"column":16,"nodeType":"302","messageId":"303","endLine":1,"endColumn":25},{"ruleId":"317","severity":1,"message":"318","line":8,"column":21,"nodeType":"319","endLine":8,"endColumn":192},{"ruleId":"300","severity":1,"message":"330","line":4,"column":9,"nodeType":"302","messageId":"303","endLine":4,"endColumn":17},{"ruleId":"300","severity":1,"message":"331","line":11,"column":12,"nodeType":"302","messageId":"303","endLine":11,"endColumn":21},{"ruleId":"300","severity":1,"message":"332","line":11,"column":23,"nodeType":"302","messageId":"303","endLine":11,"endColumn":36},{"ruleId":"300","severity":1,"message":"333","line":11,"column":38,"nodeType":"302","messageId":"303","endLine":11,"endColumn":49},{"ruleId":"334","severity":1,"message":"335","line":25,"column":21,"nodeType":"319","endLine":25,"endColumn":257},{"ruleId":"334","severity":1,"message":"335","line":26,"column":21,"nodeType":"319","endLine":26,"endColumn":257},{"ruleId":"334","severity":1,"message":"335","line":37,"column":25,"nodeType":"319","endLine":37,"endColumn":221},{"ruleId":"334","severity":1,"message":"335","line":38,"column":25,"nodeType":"319","endLine":38,"endColumn":221},{"ruleId":"334","severity":1,"message":"335","line":39,"column":25,"nodeType":"319","endLine":39,"endColumn":221},{"ruleId":"300","severity":1,"message":"327","line":7,"column":8,"nodeType":"302","messageId":"303","endLine":7,"endColumn":19},{"ruleId":"300","severity":1,"message":"336","line":11,"column":8,"nodeType":"302","messageId":"303","endLine":11,"endColumn":13},{"ruleId":"300","severity":1,"message":"337","line":12,"column":8,"nodeType":"302","messageId":"303","endLine":12,"endColumn":23},{"ruleId":"300","severity":1,"message":"306","line":27,"column":24,"nodeType":"302","messageId":"303","endLine":27,"endColumn":31},{"ruleId":"300","severity":1,"message":"307","line":27,"column":33,"nodeType":"302","messageId":"303","endLine":27,"endColumn":38},{"ruleId":"313","severity":1,"message":"314","line":49,"column":25,"nodeType":"315","messageId":"316","endLine":49,"endColumn":27},{"ruleId":"313","severity":1,"message":"314","line":54,"column":25,"nodeType":"315","messageId":"316","endLine":54,"endColumn":27},{"ruleId":"321","severity":1,"message":"338","line":62,"column":7,"nodeType":"323","endLine":62,"endColumn":19,"suggestions":"339"},{"ruleId":"321","severity":1,"message":"322","line":70,"column":7,"nodeType":"323","endLine":70,"endColumn":13,"suggestions":"340"},{"ruleId":"341","severity":1,"message":"342","line":74,"column":9,"nodeType":"343","messageId":"344","endLine":88,"endColumn":10},{"ruleId":"345","severity":1,"message":"346","line":77,"column":13,"nodeType":"347","messageId":"348","endLine":79,"endColumn":23},{"ruleId":"313","severity":1,"message":"314","line":133,"column":41,"nodeType":"315","messageId":"316","endLine":133,"endColumn":43},{"ruleId":"313","severity":1,"message":"314","line":134,"column":38,"nodeType":"315","messageId":"316","endLine":134,"endColumn":40},{"ruleId":"317","severity":1,"message":"318","line":151,"column":21,"nodeType":"319","endLine":151,"endColumn":211},{"ruleId":"349","severity":1,"message":"350","line":151,"column":44,"nodeType":"351","messageId":"352","endLine":151,"endColumn":46},{"ruleId":"349","severity":1,"message":"350","line":151,"column":69,"nodeType":"351","messageId":"352","endLine":151,"endColumn":71},{"ruleId":"313","severity":1,"message":"314","line":258,"column":112,"nodeType":"315","messageId":"316","endLine":258,"endColumn":114},{"ruleId":"313","severity":1,"message":"314","line":258,"column":133,"nodeType":"315","messageId":"316","endLine":258,"endColumn":135},{"ruleId":"313","severity":1,"message":"314","line":258,"column":154,"nodeType":"315","messageId":"316","endLine":258,"endColumn":156},{"ruleId":"300","severity":1,"message":"306","line":12,"column":20,"nodeType":"302","messageId":"303","endLine":12,"endColumn":27},{"ruleId":"300","severity":1,"message":"307","line":12,"column":29,"nodeType":"302","messageId":"303","endLine":12,"endColumn":34},{"ruleId":"341","severity":1,"message":"342","line":42,"column":9,"nodeType":"343","messageId":"344","endLine":71,"endColumn":10},{"ruleId":"341","severity":1,"message":"342","line":118,"column":9,"nodeType":"343","messageId":"344","endLine":131,"endColumn":10},{"ruleId":"300","severity":1,"message":"353","line":200,"column":32,"nodeType":"302","messageId":"303","endLine":200,"endColumn":36},{"ruleId":"334","severity":1,"message":"335","line":211,"column":33,"nodeType":"319","endLine":211,"endColumn":271},{"ruleId":"300","severity":1,"message":"306","line":12,"column":22,"nodeType":"302","messageId":"303","endLine":12,"endColumn":29},{"ruleId":"300","severity":1,"message":"307","line":12,"column":31,"nodeType":"302","messageId":"303","endLine":12,"endColumn":36},{"ruleId":"300","severity":1,"message":"304","line":1,"column":10,"nodeType":"302","messageId":"303","endLine":1,"endColumn":19},{"ruleId":"300","severity":1,"message":"301","line":1,"column":21,"nodeType":"302","messageId":"303","endLine":1,"endColumn":29},{"ruleId":"300","severity":1,"message":"354","line":7,"column":33,"nodeType":"302","messageId":"303","endLine":7,"endColumn":44},{"ruleId":"317","severity":1,"message":"318","line":11,"column":13,"nodeType":"319","endLine":11,"endColumn":188},{"ruleId":"313","severity":1,"message":"314","line":18,"column":31,"nodeType":"315","messageId":"316","endLine":18,"endColumn":33},{"ruleId":"300","severity":1,"message":"355","line":5,"column":9,"nodeType":"302","messageId":"303","endLine":5,"endColumn":22},{"ruleId":"300","severity":1,"message":"356","line":16,"column":25,"nodeType":"302","messageId":"303","endLine":16,"endColumn":39},{"ruleId":"313","severity":1,"message":"314","line":25,"column":27,"nodeType":"315","messageId":"316","endLine":25,"endColumn":29},{"ruleId":"313","severity":1,"message":"314","line":32,"column":24,"nodeType":"315","messageId":"316","endLine":32,"endColumn":26},{"ruleId":"313","severity":1,"message":"314","line":43,"column":30,"nodeType":"315","messageId":"316","endLine":43,"endColumn":32},{"ruleId":"313","severity":1,"message":"314","line":45,"column":28,"nodeType":"315","messageId":"316","endLine":45,"endColumn":30},{"ruleId":"313","severity":1,"message":"314","line":45,"column":49,"nodeType":"315","messageId":"316","endLine":45,"endColumn":51},{"ruleId":"313","severity":1,"message":"314","line":48,"column":33,"nodeType":"315","messageId":"316","endLine":48,"endColumn":35},{"ruleId":"300","severity":1,"message":"304","line":1,"column":26,"nodeType":"302","messageId":"303","endLine":1,"endColumn":35},{"ruleId":"300","severity":1,"message":"336","line":7,"column":8,"nodeType":"302","messageId":"303","endLine":7,"endColumn":13},{"ruleId":"300","severity":1,"message":"357","line":7,"column":9,"nodeType":"302","messageId":"303","endLine":7,"endColumn":21},{"ruleId":"300","severity":1,"message":"358","line":9,"column":8,"nodeType":"302","messageId":"303","endLine":9,"endColumn":18},{"ruleId":"300","severity":1,"message":"359","line":18,"column":10,"nodeType":"302","messageId":"303","endLine":18,"endColumn":32},{"ruleId":"300","severity":1,"message":"360","line":38,"column":25,"nodeType":"302","messageId":"303","endLine":38,"endColumn":33},{"ruleId":"300","severity":1,"message":"361","line":38,"column":35,"nodeType":"302","messageId":"303","endLine":38,"endColumn":41},{"ruleId":"300","severity":1,"message":"362","line":39,"column":27,"nodeType":"302","messageId":"303","endLine":39,"endColumn":35},{"ruleId":"300","severity":1,"message":"363","line":39,"column":37,"nodeType":"302","messageId":"303","endLine":39,"endColumn":43},{"ruleId":"321","severity":1,"message":"322","line":49,"column":7,"nodeType":"323","endLine":49,"endColumn":13,"suggestions":"364"},{"ruleId":"313","severity":1,"message":"365","line":55,"column":28,"nodeType":"315","messageId":"316","endLine":55,"endColumn":30},{"ruleId":"321","severity":1,"message":"366","line":60,"column":7,"nodeType":"323","endLine":60,"endColumn":17,"suggestions":"367"},{"ruleId":"368","severity":1,"message":"369","line":86,"column":65,"nodeType":"370","messageId":"371","endLine":86,"endColumn":66,"fix":"372"},{"ruleId":"373","severity":1,"message":"374","line":141,"column":21,"nodeType":"319","endLine":141,"endColumn":320},{"ruleId":"313","severity":1,"message":"314","line":178,"column":78,"nodeType":"315","messageId":"316","endLine":178,"endColumn":80},{"ruleId":"313","severity":1,"message":"314","line":178,"column":120,"nodeType":"315","messageId":"316","endLine":178,"endColumn":122},{"ruleId":"313","severity":1,"message":"314","line":187,"column":78,"nodeType":"315","messageId":"316","endLine":187,"endColumn":80},{"ruleId":"313","severity":1,"message":"314","line":187,"column":121,"nodeType":"315","messageId":"316","endLine":187,"endColumn":123},{"ruleId":"313","severity":1,"message":"314","line":196,"column":78,"nodeType":"315","messageId":"316","endLine":196,"endColumn":80},{"ruleId":"313","severity":1,"message":"314","line":196,"column":117,"nodeType":"315","messageId":"316","endLine":196,"endColumn":119},{"ruleId":"313","severity":1,"message":"314","line":216,"column":62,"nodeType":"315","messageId":"316","endLine":216,"endColumn":64},{"ruleId":"300","severity":1,"message":"375","line":2,"column":9,"nodeType":"302","messageId":"303","endLine":2,"endColumn":14},{"ruleId":"300","severity":1,"message":"376","line":9,"column":8,"nodeType":"302","messageId":"303","endLine":9,"endColumn":15},{"ruleId":"300","severity":1,"message":"306","line":23,"column":27,"nodeType":"302","messageId":"303","endLine":23,"endColumn":34},{"ruleId":"300","severity":1,"message":"307","line":23,"column":36,"nodeType":"302","messageId":"303","endLine":23,"endColumn":41},{"ruleId":"313","severity":1,"message":"314","line":34,"column":74,"nodeType":"315","messageId":"316","endLine":34,"endColumn":76},{"ruleId":"313","severity":1,"message":"314","line":35,"column":71,"nodeType":"315","messageId":"316","endLine":35,"endColumn":73},{"ruleId":"321","severity":1,"message":"377","line":37,"column":7,"nodeType":"323","endLine":37,"endColumn":22,"suggestions":"378"},{"ruleId":"321","severity":1,"message":"322","line":45,"column":7,"nodeType":"323","endLine":45,"endColumn":13,"suggestions":"379"},{"ruleId":"313","severity":1,"message":"365","line":52,"column":27,"nodeType":"315","messageId":"316","endLine":52,"endColumn":29},{"ruleId":"321","severity":1,"message":"380","line":62,"column":7,"nodeType":"323","endLine":62,"endColumn":25,"suggestions":"381"},{"ruleId":"313","severity":1,"message":"314","line":128,"column":115,"nodeType":"315","messageId":"316","endLine":128,"endColumn":117},{"ruleId":"373","severity":1,"message":"374","line":151,"column":17,"nodeType":"319","endLine":151,"endColumn":310},{"ruleId":"317","severity":1,"message":"318","line":11,"column":21,"nodeType":"319","endLine":11,"endColumn":192},{"ruleId":"317","severity":1,"message":"318","line":9,"column":21,"nodeType":"319","endLine":9,"endColumn":192},{"ruleId":"300","severity":1,"message":"375","line":2,"column":9,"nodeType":"302","messageId":"303","endLine":2,"endColumn":14},{"ruleId":"300","severity":1,"message":"358","line":6,"column":8,"nodeType":"302","messageId":"303","endLine":6,"endColumn":18},{"ruleId":"300","severity":1,"message":"376","line":9,"column":8,"nodeType":"302","messageId":"303","endLine":9,"endColumn":15},{"ruleId":"300","severity":1,"message":"362","line":24,"column":27,"nodeType":"302","messageId":"303","endLine":24,"endColumn":35},{"ruleId":"300","severity":1,"message":"363","line":24,"column":37,"nodeType":"302","messageId":"303","endLine":24,"endColumn":43},{"ruleId":"300","severity":1,"message":"360","line":27,"column":25,"nodeType":"302","messageId":"303","endLine":27,"endColumn":33},{"ruleId":"300","severity":1,"message":"361","line":27,"column":35,"nodeType":"302","messageId":"303","endLine":27,"endColumn":41},{"ruleId":"300","severity":1,"message":"382","line":35,"column":25,"nodeType":"302","messageId":"303","endLine":35,"endColumn":39},{"ruleId":"313","severity":1,"message":"314","line":45,"column":87,"nodeType":"315","messageId":"316","endLine":45,"endColumn":89},{"ruleId":"321","severity":1,"message":"377","line":54,"column":7,"nodeType":"323","endLine":54,"endColumn":20,"suggestions":"383"},{"ruleId":"321","severity":1,"message":"322","line":63,"column":7,"nodeType":"323","endLine":63,"endColumn":13,"suggestions":"384"},{"ruleId":"313","severity":1,"message":"314","line":79,"column":68,"nodeType":"315","messageId":"316","endLine":79,"endColumn":70},{"ruleId":"313","severity":1,"message":"314","line":96,"column":68,"nodeType":"315","messageId":"316","endLine":96,"endColumn":70},{"ruleId":"321","severity":1,"message":"385","line":124,"column":7,"nodeType":"323","endLine":124,"endColumn":32,"suggestions":"386"},{"ruleId":"321","severity":1,"message":"387","line":134,"column":8,"nodeType":"323","endLine":134,"endColumn":18,"suggestions":"388"},{"ruleId":"313","severity":1,"message":"314","line":140,"column":16,"nodeType":"315","messageId":"316","endLine":140,"endColumn":18},{"ruleId":"313","severity":1,"message":"314","line":141,"column":22,"nodeType":"315","messageId":"316","endLine":141,"endColumn":24},{"ruleId":"313","severity":1,"message":"314","line":148,"column":21,"nodeType":"315","messageId":"316","endLine":148,"endColumn":23},{"ruleId":"313","severity":1,"message":"314","line":148,"column":38,"nodeType":"315","messageId":"316","endLine":148,"endColumn":40},{"ruleId":"313","severity":1,"message":"314","line":171,"column":58,"nodeType":"315","messageId":"316","endLine":171,"endColumn":60},{"ruleId":"313","severity":1,"message":"314","line":203,"column":39,"nodeType":"315","messageId":"316","endLine":203,"endColumn":41},{"ruleId":"313","severity":1,"message":"314","line":211,"column":31,"nodeType":"315","messageId":"316","endLine":211,"endColumn":33},{"ruleId":"313","severity":1,"message":"314","line":274,"column":134,"nodeType":"315","messageId":"316","endLine":274,"endColumn":136},{"ruleId":"313","severity":1,"message":"314","line":294,"column":73,"nodeType":"315","messageId":"316","endLine":294,"endColumn":75},{"ruleId":"373","severity":1,"message":"374","line":309,"column":17,"nodeType":"319","endLine":309,"endColumn":329},{"ruleId":"313","severity":1,"message":"314","line":321,"column":96,"nodeType":"315","messageId":"316","endLine":321,"endColumn":98},{"ruleId":"313","severity":1,"message":"365","line":390,"column":141,"nodeType":"315","messageId":"316","endLine":390,"endColumn":143},{"ruleId":"341","severity":1,"message":"342","line":13,"column":5,"nodeType":"343","messageId":"344","endLine":41,"endColumn":6},{"ruleId":"313","severity":1,"message":"314","line":29,"column":39,"nodeType":"315","messageId":"316","endLine":29,"endColumn":41},{"ruleId":"300","severity":1,"message":"301","line":1,"column":16,"nodeType":"302","messageId":"303","endLine":1,"endColumn":24},"no-native-reassign",["389"],"no-negated-in-lhs",["390"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Footer' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'loadingTournaments' is assigned a value but never used.","'tournamentsError' is assigned a value but never used.","'blogPosts' is assigned a value but never used.","'loadingPosts' is assigned a value but never used.","'postsError' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useRouteMatch' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'db'. Either include it or remove the dependency array.","ArrayExpression",["391"],"'Router' is defined but never used.","'Switch' is defined but never used.","'tourneyIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'past' and 'upcoming'. Either include them or remove the dependency array.",["392"],"'firebase' is defined but never used.","'allVideos' is assigned a value but never used.","'videosLoading' is assigned a value but never used.","'videosError' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'axios' is defined but never used.","'TournamentsPage' is defined but never used.","React Hook useEffect has missing dependencies: 'db' and 'freeAgent'. Either include them or remove the dependency array. You can also do a functional update 'setFreeAgent(f => ...)' if you only need 'freeAgent' in the 'setFreeAgent' call.",["393"],["394"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'link' is assigned a value but never used.","'description' is assigned a value but never used.","'useCollection' is defined but never used.","'setContentPass' is assigned a value but never used.","'useAuthState' is defined but never used.","'generateID' is defined but never used.","'unstable_concurrentAct' is defined but never used.","'tLoading' is assigned a value but never used.","'tError' is assigned a value but never used.","'oLoading' is assigned a value but never used.","'oError' is assigned a value but never used.",["395"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'initialUser'. Either include it or remove the dependency array.",["396"],"rest-spread-spacing","Unexpected whitespace after spread property operator.","ExperimentalSpreadProperty","unexpectedWhitespace",{"range":"397","text":"398"},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Route' is defined but never used.","'OrgCard' is defined but never used.","React Hook useEffect has missing dependencies: 'pathname' and 'query'. Either include them or remove the dependency array.",["399"],["400"],"React Hook useEffect has a missing dependency: 'initialOrg'. Either include it or remove the dependency array.",["401"],"'setTempResults' is assigned a value but never used.",["402"],["403"],"React Hook useEffect has missing dependencies: 'initialTournament', 'tempResults', and 'updateTournament'. Either include them or remove the dependency array.",["404"],"React Hook useEffect has a missing dependency: 'tournamentData'. Either include it or remove the dependency array. You can also do a functional update 'setTournamentData(t => ...)' if you only need 'tournamentData' in the 'setTournamentData' call.",["405"],"no-global-assign","no-unsafe-negation",{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},{"desc":"406","fix":"412"},{"desc":"406","fix":"413"},{"desc":"414","fix":"415"},[2765,2766],"",{"desc":"416","fix":"417"},{"desc":"406","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"406","fix":"423"},{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},"Update the dependencies array to be: [db, user]",{"range":"428","text":"429"},"Update the dependencies array to be: [tournaments, keyword, upcoming, past]",{"range":"430","text":"431"},"Update the dependencies array to be: [db, freeAgent, tournament]",{"range":"432","text":"433"},{"range":"434","text":"429"},{"range":"435","text":"429"},"Update the dependencies array to be: [initialUser, userData]",{"range":"436","text":"437"},"Update the dependencies array to be: [organizations, pathname, query]",{"range":"438","text":"439"},{"range":"440","text":"429"},"Update the dependencies array to be: [initialOrg, orgData, tempImg]",{"range":"441","text":"442"},"Update the dependencies array to be: [pathname, query, tournaments]",{"range":"443","text":"444"},{"range":"445","text":"429"},"Update the dependencies array to be: [tournamentData, tempImg, initialTournament, updateTournament, tempResults]",{"range":"446","text":"447"},"Update the dependencies array to be: [schedule, tournamentData]",{"range":"448","text":"449"},[465,471],"[db, user]",[2124,2145],"[tournaments, keyword, upcoming, past]",[2204,2216],"[db, freeAgent, tournament]",[2407,2413],[1680,1686],[1951,1961],"[initialUser, userData]",[1506,1521],"[organizations, pathname, query]",[1725,1731],[2065,2083],"[initialOrg, orgData, tempImg]",[2242,2255],"[pathname, query, tournaments]",[2505,2511],[5013,5038],"[tournamentData, tempImg, initialTournament, updateTournament, tempResults]",[5310,5320],"[schedule, tournamentData]"]